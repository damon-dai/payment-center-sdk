// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: chess_trade.proto

// package new_chess;

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Trade_H5Prepaid_FullMethodName                  = "/proto.Trade/h5Prepaid"
	Trade_AppPrepaid_FullMethodName                 = "/proto.Trade/AppPrepaid"
	Trade_JsapiPrepaid_FullMethodName               = "/proto.Trade/jsapiPrepaid"
	Trade_QueryOrder_FullMethodName                 = "/proto.Trade/queryOrder"
	Trade_CancelOrder_FullMethodName                = "/proto.Trade/cancelOrder"
	Trade_RefundOrder_FullMethodName                = "/proto.Trade/refundOrder"
	Trade_WithdrawBankCard_FullMethodName           = "/proto.Trade/withdrawBankCard"
	Trade_QueryExtractOrder_FullMethodName          = "/proto.Trade/queryExtractOrder"
	Trade_SaveExtractConfig_FullMethodName          = "/proto.Trade/saveExtractConfig"
	Trade_GetExtractConfig_FullMethodName           = "/proto.Trade/getExtractConfig"
	Trade_SaveExtractUserConfig_FullMethodName      = "/proto.Trade/saveExtractUserConfig"
	Trade_GetExtractUserConfig_FullMethodName       = "/proto.Trade/getExtractUserConfig"
	Trade_GetExtractLogs_FullMethodName             = "/proto.Trade/getExtractLogs"
	Trade_CheckUserExtractRisk_FullMethodName       = "/proto.Trade/checkUserExtractRisk"
	Trade_HnapayNewSelfAccount_FullMethodName       = "/proto.Trade/hnapayNewSelfAccount"
	Trade_HnapayBindBankCard_FullMethodName         = "/proto.Trade/hnapayBindBankCard"
	Trade_HnapayBindBankCardConfirm_FullMethodName  = "/proto.Trade/hnapayBindBankCardConfirm"
	Trade_HnapayUnbindBankCard_FullMethodName       = "/proto.Trade/hnapayUnbindBankCard"
	Trade_HnapayQuickPayOrder_FullMethodName        = "/proto.Trade/hnapayQuickPayOrder"
	Trade_HnapayQuickPayConfirm_FullMethodName      = "/proto.Trade/hnapayQuickPayConfirm"
	Trade_HnapayTransfer_FullMethodName             = "/proto.Trade/hnapayTransfer"
	Trade_HnapayWithdraw_FullMethodName             = "/proto.Trade/hnapayWithdraw"
	Trade_HnapayCheckUserAccountInfo_FullMethodName = "/proto.Trade/hnapayCheckUserAccountInfo"
	Trade_GetNcountAccountInfo_FullMethodName       = "/proto.Trade/getNcountAccountInfo"
	Trade_SetPaymentSecret_FullMethodName           = "/proto.Trade/setPaymentSecret"
)

// TradeClient is the client API for Trade service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TradeClient interface {
	// h5预下单
	H5Prepaid(ctx context.Context, in *PrepaidReq, opts ...grpc.CallOption) (*H5PrepaidResp, error)
	// app下单
	AppPrepaid(ctx context.Context, in *PrepaidReq, opts ...grpc.CallOption) (*AppPrepaidResp, error)
	// jsapi下单
	JsapiPrepaid(ctx context.Context, in *PrepaidReq, opts ...grpc.CallOption) (*JsapiPrepaidResp, error)
	// 订单查询
	QueryOrder(ctx context.Context, in *QueryOrderReq, opts ...grpc.CallOption) (*QueryOrderResp, error)
	// 取消订单
	CancelOrder(ctx context.Context, in *CancelOrderReq, opts ...grpc.CallOption) (*CancelOrderResp, error)
	// 订单退款
	RefundOrder(ctx context.Context, in *RefundOrderReq, opts ...grpc.CallOption) (*RefundOrderResp, error)
	// 新生账户提现至银行卡
	WithdrawBankCard(ctx context.Context, in *WithdrawBankCardReq, opts ...grpc.CallOption) (*WithdrawBankCardResp, error)
	// 提现订单查询
	QueryExtractOrder(ctx context.Context, in *QueryExtractOrderReq, opts ...grpc.CallOption) (*QueryExtractOrderResp, error)
	// 提现全局配置
	SaveExtractConfig(ctx context.Context, in *SaveExtractConfigReq, opts ...grpc.CallOption) (*SaveExtractConfigResp, error)
	// 获取提现全局配置
	GetExtractConfig(ctx context.Context, in *GetExtractConfigReq, opts ...grpc.CallOption) (*GetExtractConfigResp, error)
	// 提现用户配置
	SaveExtractUserConfig(ctx context.Context, in *SaveExtractUserConfigReq, opts ...grpc.CallOption) (*SaveExtractUserConfigResp, error)
	// 获取提现用户配置
	GetExtractUserConfig(ctx context.Context, in *GetExtractUserConfigReq, opts ...grpc.CallOption) (*GetExtractUserConfigResp, error)
	// 获取提现日志列表
	GetExtractLogs(ctx context.Context, in *GetExtractLogsReq, opts ...grpc.CallOption) (*GetExtractLogsResp, error)
	// 检查用户是否被提现封控
	CheckUserExtractRisk(ctx context.Context, in *CheckUserExtractRiskReq, opts ...grpc.CallOption) (*CheckUserExtractRiskResp, error)
	// 新生个人开户
	HnapayNewSelfAccount(ctx context.Context, in *HnapayNewSelfAccountReq, opts ...grpc.CallOption) (*HnapayNewSelfAccountResp, error)
	// 新生个人用户绑卡
	HnapayBindBankCard(ctx context.Context, in *HnapayBindBankCardReq, opts ...grpc.CallOption) (*HnapayBindBankCardResp, error)
	// 新生个人用户绑卡确认
	HnapayBindBankCardConfirm(ctx context.Context, in *HnapayBindBankCardConfirmReq, opts ...grpc.CallOption) (*HnapayBindBankCardConfirmResp, error)
	// 新生个人用户解绑银行卡
	HnapayUnbindBankCard(ctx context.Context, in *HnapayUnbindBankCardReq, opts ...grpc.CallOption) (*HnapayUnbindBankCardResp, error)
	// 新生快捷支付下单：银行卡充值
	HnapayQuickPayOrder(ctx context.Context, in *HnapayQuickPayOrderReq, opts ...grpc.CallOption) (*HnapayQuickPayOrderResp, error)
	// 新生快捷支付确认
	HnapayQuickPayConfirm(ctx context.Context, in *HnapayQuickPayConfirmReq, opts ...grpc.CallOption) (*HnapayQuickPayConfirmResp, error)
	// 新生转账
	HnapayTransfer(ctx context.Context, in *HnapayTransferReq, opts ...grpc.CallOption) (*HnapayTransferResp, error)
	// 新生提现
	HnapayWithdraw(ctx context.Context, in *HnapayWithdrawReq, opts ...grpc.CallOption) (*HnapayWithdrawResp, error)
	// 新生查询用户账户信息
	HnapayCheckUserAccountInfo(ctx context.Context, in *HnapayCheckUserAccountInfoReq, opts ...grpc.CallOption) (*HnapayCheckUserAccountInfoResp, error)
	// 获取系统账户信息
	GetNcountAccountInfo(ctx context.Context, in *GetNcountAccountInfoReq, opts ...grpc.CallOption) (*GetNcountAccountInfoResp, error)
	// 设置支付密码
	SetPaymentSecret(ctx context.Context, in *SetPaymentSecretReq, opts ...grpc.CallOption) (*SetPaymentSecretResp, error)
}

type tradeClient struct {
	cc grpc.ClientConnInterface
}

func NewTradeClient(cc grpc.ClientConnInterface) TradeClient {
	return &tradeClient{cc}
}

func (c *tradeClient) H5Prepaid(ctx context.Context, in *PrepaidReq, opts ...grpc.CallOption) (*H5PrepaidResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(H5PrepaidResp)
	err := c.cc.Invoke(ctx, Trade_H5Prepaid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeClient) AppPrepaid(ctx context.Context, in *PrepaidReq, opts ...grpc.CallOption) (*AppPrepaidResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppPrepaidResp)
	err := c.cc.Invoke(ctx, Trade_AppPrepaid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeClient) JsapiPrepaid(ctx context.Context, in *PrepaidReq, opts ...grpc.CallOption) (*JsapiPrepaidResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JsapiPrepaidResp)
	err := c.cc.Invoke(ctx, Trade_JsapiPrepaid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeClient) QueryOrder(ctx context.Context, in *QueryOrderReq, opts ...grpc.CallOption) (*QueryOrderResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryOrderResp)
	err := c.cc.Invoke(ctx, Trade_QueryOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeClient) CancelOrder(ctx context.Context, in *CancelOrderReq, opts ...grpc.CallOption) (*CancelOrderResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelOrderResp)
	err := c.cc.Invoke(ctx, Trade_CancelOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeClient) RefundOrder(ctx context.Context, in *RefundOrderReq, opts ...grpc.CallOption) (*RefundOrderResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefundOrderResp)
	err := c.cc.Invoke(ctx, Trade_RefundOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeClient) WithdrawBankCard(ctx context.Context, in *WithdrawBankCardReq, opts ...grpc.CallOption) (*WithdrawBankCardResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WithdrawBankCardResp)
	err := c.cc.Invoke(ctx, Trade_WithdrawBankCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeClient) QueryExtractOrder(ctx context.Context, in *QueryExtractOrderReq, opts ...grpc.CallOption) (*QueryExtractOrderResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryExtractOrderResp)
	err := c.cc.Invoke(ctx, Trade_QueryExtractOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeClient) SaveExtractConfig(ctx context.Context, in *SaveExtractConfigReq, opts ...grpc.CallOption) (*SaveExtractConfigResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveExtractConfigResp)
	err := c.cc.Invoke(ctx, Trade_SaveExtractConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeClient) GetExtractConfig(ctx context.Context, in *GetExtractConfigReq, opts ...grpc.CallOption) (*GetExtractConfigResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExtractConfigResp)
	err := c.cc.Invoke(ctx, Trade_GetExtractConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeClient) SaveExtractUserConfig(ctx context.Context, in *SaveExtractUserConfigReq, opts ...grpc.CallOption) (*SaveExtractUserConfigResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveExtractUserConfigResp)
	err := c.cc.Invoke(ctx, Trade_SaveExtractUserConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeClient) GetExtractUserConfig(ctx context.Context, in *GetExtractUserConfigReq, opts ...grpc.CallOption) (*GetExtractUserConfigResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExtractUserConfigResp)
	err := c.cc.Invoke(ctx, Trade_GetExtractUserConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeClient) GetExtractLogs(ctx context.Context, in *GetExtractLogsReq, opts ...grpc.CallOption) (*GetExtractLogsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExtractLogsResp)
	err := c.cc.Invoke(ctx, Trade_GetExtractLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeClient) CheckUserExtractRisk(ctx context.Context, in *CheckUserExtractRiskReq, opts ...grpc.CallOption) (*CheckUserExtractRiskResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckUserExtractRiskResp)
	err := c.cc.Invoke(ctx, Trade_CheckUserExtractRisk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeClient) HnapayNewSelfAccount(ctx context.Context, in *HnapayNewSelfAccountReq, opts ...grpc.CallOption) (*HnapayNewSelfAccountResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HnapayNewSelfAccountResp)
	err := c.cc.Invoke(ctx, Trade_HnapayNewSelfAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeClient) HnapayBindBankCard(ctx context.Context, in *HnapayBindBankCardReq, opts ...grpc.CallOption) (*HnapayBindBankCardResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HnapayBindBankCardResp)
	err := c.cc.Invoke(ctx, Trade_HnapayBindBankCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeClient) HnapayBindBankCardConfirm(ctx context.Context, in *HnapayBindBankCardConfirmReq, opts ...grpc.CallOption) (*HnapayBindBankCardConfirmResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HnapayBindBankCardConfirmResp)
	err := c.cc.Invoke(ctx, Trade_HnapayBindBankCardConfirm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeClient) HnapayUnbindBankCard(ctx context.Context, in *HnapayUnbindBankCardReq, opts ...grpc.CallOption) (*HnapayUnbindBankCardResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HnapayUnbindBankCardResp)
	err := c.cc.Invoke(ctx, Trade_HnapayUnbindBankCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeClient) HnapayQuickPayOrder(ctx context.Context, in *HnapayQuickPayOrderReq, opts ...grpc.CallOption) (*HnapayQuickPayOrderResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HnapayQuickPayOrderResp)
	err := c.cc.Invoke(ctx, Trade_HnapayQuickPayOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeClient) HnapayQuickPayConfirm(ctx context.Context, in *HnapayQuickPayConfirmReq, opts ...grpc.CallOption) (*HnapayQuickPayConfirmResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HnapayQuickPayConfirmResp)
	err := c.cc.Invoke(ctx, Trade_HnapayQuickPayConfirm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeClient) HnapayTransfer(ctx context.Context, in *HnapayTransferReq, opts ...grpc.CallOption) (*HnapayTransferResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HnapayTransferResp)
	err := c.cc.Invoke(ctx, Trade_HnapayTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeClient) HnapayWithdraw(ctx context.Context, in *HnapayWithdrawReq, opts ...grpc.CallOption) (*HnapayWithdrawResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HnapayWithdrawResp)
	err := c.cc.Invoke(ctx, Trade_HnapayWithdraw_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeClient) HnapayCheckUserAccountInfo(ctx context.Context, in *HnapayCheckUserAccountInfoReq, opts ...grpc.CallOption) (*HnapayCheckUserAccountInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HnapayCheckUserAccountInfoResp)
	err := c.cc.Invoke(ctx, Trade_HnapayCheckUserAccountInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeClient) GetNcountAccountInfo(ctx context.Context, in *GetNcountAccountInfoReq, opts ...grpc.CallOption) (*GetNcountAccountInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNcountAccountInfoResp)
	err := c.cc.Invoke(ctx, Trade_GetNcountAccountInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradeClient) SetPaymentSecret(ctx context.Context, in *SetPaymentSecretReq, opts ...grpc.CallOption) (*SetPaymentSecretResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetPaymentSecretResp)
	err := c.cc.Invoke(ctx, Trade_SetPaymentSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TradeServer is the server API for Trade service.
// All implementations must embed UnimplementedTradeServer
// for forward compatibility.
type TradeServer interface {
	// h5预下单
	H5Prepaid(context.Context, *PrepaidReq) (*H5PrepaidResp, error)
	// app下单
	AppPrepaid(context.Context, *PrepaidReq) (*AppPrepaidResp, error)
	// jsapi下单
	JsapiPrepaid(context.Context, *PrepaidReq) (*JsapiPrepaidResp, error)
	// 订单查询
	QueryOrder(context.Context, *QueryOrderReq) (*QueryOrderResp, error)
	// 取消订单
	CancelOrder(context.Context, *CancelOrderReq) (*CancelOrderResp, error)
	// 订单退款
	RefundOrder(context.Context, *RefundOrderReq) (*RefundOrderResp, error)
	// 新生账户提现至银行卡
	WithdrawBankCard(context.Context, *WithdrawBankCardReq) (*WithdrawBankCardResp, error)
	// 提现订单查询
	QueryExtractOrder(context.Context, *QueryExtractOrderReq) (*QueryExtractOrderResp, error)
	// 提现全局配置
	SaveExtractConfig(context.Context, *SaveExtractConfigReq) (*SaveExtractConfigResp, error)
	// 获取提现全局配置
	GetExtractConfig(context.Context, *GetExtractConfigReq) (*GetExtractConfigResp, error)
	// 提现用户配置
	SaveExtractUserConfig(context.Context, *SaveExtractUserConfigReq) (*SaveExtractUserConfigResp, error)
	// 获取提现用户配置
	GetExtractUserConfig(context.Context, *GetExtractUserConfigReq) (*GetExtractUserConfigResp, error)
	// 获取提现日志列表
	GetExtractLogs(context.Context, *GetExtractLogsReq) (*GetExtractLogsResp, error)
	// 检查用户是否被提现封控
	CheckUserExtractRisk(context.Context, *CheckUserExtractRiskReq) (*CheckUserExtractRiskResp, error)
	// 新生个人开户
	HnapayNewSelfAccount(context.Context, *HnapayNewSelfAccountReq) (*HnapayNewSelfAccountResp, error)
	// 新生个人用户绑卡
	HnapayBindBankCard(context.Context, *HnapayBindBankCardReq) (*HnapayBindBankCardResp, error)
	// 新生个人用户绑卡确认
	HnapayBindBankCardConfirm(context.Context, *HnapayBindBankCardConfirmReq) (*HnapayBindBankCardConfirmResp, error)
	// 新生个人用户解绑银行卡
	HnapayUnbindBankCard(context.Context, *HnapayUnbindBankCardReq) (*HnapayUnbindBankCardResp, error)
	// 新生快捷支付下单：银行卡充值
	HnapayQuickPayOrder(context.Context, *HnapayQuickPayOrderReq) (*HnapayQuickPayOrderResp, error)
	// 新生快捷支付确认
	HnapayQuickPayConfirm(context.Context, *HnapayQuickPayConfirmReq) (*HnapayQuickPayConfirmResp, error)
	// 新生转账
	HnapayTransfer(context.Context, *HnapayTransferReq) (*HnapayTransferResp, error)
	// 新生提现
	HnapayWithdraw(context.Context, *HnapayWithdrawReq) (*HnapayWithdrawResp, error)
	// 新生查询用户账户信息
	HnapayCheckUserAccountInfo(context.Context, *HnapayCheckUserAccountInfoReq) (*HnapayCheckUserAccountInfoResp, error)
	// 获取系统账户信息
	GetNcountAccountInfo(context.Context, *GetNcountAccountInfoReq) (*GetNcountAccountInfoResp, error)
	// 设置支付密码
	SetPaymentSecret(context.Context, *SetPaymentSecretReq) (*SetPaymentSecretResp, error)
	mustEmbedUnimplementedTradeServer()
}

// UnimplementedTradeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTradeServer struct{}

func (UnimplementedTradeServer) H5Prepaid(context.Context, *PrepaidReq) (*H5PrepaidResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method H5Prepaid not implemented")
}
func (UnimplementedTradeServer) AppPrepaid(context.Context, *PrepaidReq) (*AppPrepaidResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppPrepaid not implemented")
}
func (UnimplementedTradeServer) JsapiPrepaid(context.Context, *PrepaidReq) (*JsapiPrepaidResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JsapiPrepaid not implemented")
}
func (UnimplementedTradeServer) QueryOrder(context.Context, *QueryOrderReq) (*QueryOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrder not implemented")
}
func (UnimplementedTradeServer) CancelOrder(context.Context, *CancelOrderReq) (*CancelOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}
func (UnimplementedTradeServer) RefundOrder(context.Context, *RefundOrderReq) (*RefundOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundOrder not implemented")
}
func (UnimplementedTradeServer) WithdrawBankCard(context.Context, *WithdrawBankCardReq) (*WithdrawBankCardResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawBankCard not implemented")
}
func (UnimplementedTradeServer) QueryExtractOrder(context.Context, *QueryExtractOrderReq) (*QueryExtractOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryExtractOrder not implemented")
}
func (UnimplementedTradeServer) SaveExtractConfig(context.Context, *SaveExtractConfigReq) (*SaveExtractConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveExtractConfig not implemented")
}
func (UnimplementedTradeServer) GetExtractConfig(context.Context, *GetExtractConfigReq) (*GetExtractConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExtractConfig not implemented")
}
func (UnimplementedTradeServer) SaveExtractUserConfig(context.Context, *SaveExtractUserConfigReq) (*SaveExtractUserConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveExtractUserConfig not implemented")
}
func (UnimplementedTradeServer) GetExtractUserConfig(context.Context, *GetExtractUserConfigReq) (*GetExtractUserConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExtractUserConfig not implemented")
}
func (UnimplementedTradeServer) GetExtractLogs(context.Context, *GetExtractLogsReq) (*GetExtractLogsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExtractLogs not implemented")
}
func (UnimplementedTradeServer) CheckUserExtractRisk(context.Context, *CheckUserExtractRiskReq) (*CheckUserExtractRiskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserExtractRisk not implemented")
}
func (UnimplementedTradeServer) HnapayNewSelfAccount(context.Context, *HnapayNewSelfAccountReq) (*HnapayNewSelfAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HnapayNewSelfAccount not implemented")
}
func (UnimplementedTradeServer) HnapayBindBankCard(context.Context, *HnapayBindBankCardReq) (*HnapayBindBankCardResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HnapayBindBankCard not implemented")
}
func (UnimplementedTradeServer) HnapayBindBankCardConfirm(context.Context, *HnapayBindBankCardConfirmReq) (*HnapayBindBankCardConfirmResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HnapayBindBankCardConfirm not implemented")
}
func (UnimplementedTradeServer) HnapayUnbindBankCard(context.Context, *HnapayUnbindBankCardReq) (*HnapayUnbindBankCardResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HnapayUnbindBankCard not implemented")
}
func (UnimplementedTradeServer) HnapayQuickPayOrder(context.Context, *HnapayQuickPayOrderReq) (*HnapayQuickPayOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HnapayQuickPayOrder not implemented")
}
func (UnimplementedTradeServer) HnapayQuickPayConfirm(context.Context, *HnapayQuickPayConfirmReq) (*HnapayQuickPayConfirmResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HnapayQuickPayConfirm not implemented")
}
func (UnimplementedTradeServer) HnapayTransfer(context.Context, *HnapayTransferReq) (*HnapayTransferResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HnapayTransfer not implemented")
}
func (UnimplementedTradeServer) HnapayWithdraw(context.Context, *HnapayWithdrawReq) (*HnapayWithdrawResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HnapayWithdraw not implemented")
}
func (UnimplementedTradeServer) HnapayCheckUserAccountInfo(context.Context, *HnapayCheckUserAccountInfoReq) (*HnapayCheckUserAccountInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HnapayCheckUserAccountInfo not implemented")
}
func (UnimplementedTradeServer) GetNcountAccountInfo(context.Context, *GetNcountAccountInfoReq) (*GetNcountAccountInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNcountAccountInfo not implemented")
}
func (UnimplementedTradeServer) SetPaymentSecret(context.Context, *SetPaymentSecretReq) (*SetPaymentSecretResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPaymentSecret not implemented")
}
func (UnimplementedTradeServer) mustEmbedUnimplementedTradeServer() {}
func (UnimplementedTradeServer) testEmbeddedByValue()               {}

// UnsafeTradeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TradeServer will
// result in compilation errors.
type UnsafeTradeServer interface {
	mustEmbedUnimplementedTradeServer()
}

func RegisterTradeServer(s grpc.ServiceRegistrar, srv TradeServer) {
	// If the following call pancis, it indicates UnimplementedTradeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Trade_ServiceDesc, srv)
}

func _Trade_H5Prepaid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepaidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeServer).H5Prepaid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trade_H5Prepaid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeServer).H5Prepaid(ctx, req.(*PrepaidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trade_AppPrepaid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepaidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeServer).AppPrepaid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trade_AppPrepaid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeServer).AppPrepaid(ctx, req.(*PrepaidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trade_JsapiPrepaid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepaidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeServer).JsapiPrepaid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trade_JsapiPrepaid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeServer).JsapiPrepaid(ctx, req.(*PrepaidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trade_QueryOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeServer).QueryOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trade_QueryOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeServer).QueryOrder(ctx, req.(*QueryOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trade_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trade_CancelOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeServer).CancelOrder(ctx, req.(*CancelOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trade_RefundOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeServer).RefundOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trade_RefundOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeServer).RefundOrder(ctx, req.(*RefundOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trade_WithdrawBankCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawBankCardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeServer).WithdrawBankCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trade_WithdrawBankCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeServer).WithdrawBankCard(ctx, req.(*WithdrawBankCardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trade_QueryExtractOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExtractOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeServer).QueryExtractOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trade_QueryExtractOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeServer).QueryExtractOrder(ctx, req.(*QueryExtractOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trade_SaveExtractConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveExtractConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeServer).SaveExtractConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trade_SaveExtractConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeServer).SaveExtractConfig(ctx, req.(*SaveExtractConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trade_GetExtractConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExtractConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeServer).GetExtractConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trade_GetExtractConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeServer).GetExtractConfig(ctx, req.(*GetExtractConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trade_SaveExtractUserConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveExtractUserConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeServer).SaveExtractUserConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trade_SaveExtractUserConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeServer).SaveExtractUserConfig(ctx, req.(*SaveExtractUserConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trade_GetExtractUserConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExtractUserConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeServer).GetExtractUserConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trade_GetExtractUserConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeServer).GetExtractUserConfig(ctx, req.(*GetExtractUserConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trade_GetExtractLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExtractLogsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeServer).GetExtractLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trade_GetExtractLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeServer).GetExtractLogs(ctx, req.(*GetExtractLogsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trade_CheckUserExtractRisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserExtractRiskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeServer).CheckUserExtractRisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trade_CheckUserExtractRisk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeServer).CheckUserExtractRisk(ctx, req.(*CheckUserExtractRiskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trade_HnapayNewSelfAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HnapayNewSelfAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeServer).HnapayNewSelfAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trade_HnapayNewSelfAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeServer).HnapayNewSelfAccount(ctx, req.(*HnapayNewSelfAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trade_HnapayBindBankCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HnapayBindBankCardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeServer).HnapayBindBankCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trade_HnapayBindBankCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeServer).HnapayBindBankCard(ctx, req.(*HnapayBindBankCardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trade_HnapayBindBankCardConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HnapayBindBankCardConfirmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeServer).HnapayBindBankCardConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trade_HnapayBindBankCardConfirm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeServer).HnapayBindBankCardConfirm(ctx, req.(*HnapayBindBankCardConfirmReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trade_HnapayUnbindBankCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HnapayUnbindBankCardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeServer).HnapayUnbindBankCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trade_HnapayUnbindBankCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeServer).HnapayUnbindBankCard(ctx, req.(*HnapayUnbindBankCardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trade_HnapayQuickPayOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HnapayQuickPayOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeServer).HnapayQuickPayOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trade_HnapayQuickPayOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeServer).HnapayQuickPayOrder(ctx, req.(*HnapayQuickPayOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trade_HnapayQuickPayConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HnapayQuickPayConfirmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeServer).HnapayQuickPayConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trade_HnapayQuickPayConfirm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeServer).HnapayQuickPayConfirm(ctx, req.(*HnapayQuickPayConfirmReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trade_HnapayTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HnapayTransferReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeServer).HnapayTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trade_HnapayTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeServer).HnapayTransfer(ctx, req.(*HnapayTransferReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trade_HnapayWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HnapayWithdrawReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeServer).HnapayWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trade_HnapayWithdraw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeServer).HnapayWithdraw(ctx, req.(*HnapayWithdrawReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trade_HnapayCheckUserAccountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HnapayCheckUserAccountInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeServer).HnapayCheckUserAccountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trade_HnapayCheckUserAccountInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeServer).HnapayCheckUserAccountInfo(ctx, req.(*HnapayCheckUserAccountInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trade_GetNcountAccountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNcountAccountInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeServer).GetNcountAccountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trade_GetNcountAccountInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeServer).GetNcountAccountInfo(ctx, req.(*GetNcountAccountInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trade_SetPaymentSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPaymentSecretReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeServer).SetPaymentSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trade_SetPaymentSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeServer).SetPaymentSecret(ctx, req.(*SetPaymentSecretReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Trade_ServiceDesc is the grpc.ServiceDesc for Trade service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Trade_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Trade",
	HandlerType: (*TradeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "h5Prepaid",
			Handler:    _Trade_H5Prepaid_Handler,
		},
		{
			MethodName: "AppPrepaid",
			Handler:    _Trade_AppPrepaid_Handler,
		},
		{
			MethodName: "jsapiPrepaid",
			Handler:    _Trade_JsapiPrepaid_Handler,
		},
		{
			MethodName: "queryOrder",
			Handler:    _Trade_QueryOrder_Handler,
		},
		{
			MethodName: "cancelOrder",
			Handler:    _Trade_CancelOrder_Handler,
		},
		{
			MethodName: "refundOrder",
			Handler:    _Trade_RefundOrder_Handler,
		},
		{
			MethodName: "withdrawBankCard",
			Handler:    _Trade_WithdrawBankCard_Handler,
		},
		{
			MethodName: "queryExtractOrder",
			Handler:    _Trade_QueryExtractOrder_Handler,
		},
		{
			MethodName: "saveExtractConfig",
			Handler:    _Trade_SaveExtractConfig_Handler,
		},
		{
			MethodName: "getExtractConfig",
			Handler:    _Trade_GetExtractConfig_Handler,
		},
		{
			MethodName: "saveExtractUserConfig",
			Handler:    _Trade_SaveExtractUserConfig_Handler,
		},
		{
			MethodName: "getExtractUserConfig",
			Handler:    _Trade_GetExtractUserConfig_Handler,
		},
		{
			MethodName: "getExtractLogs",
			Handler:    _Trade_GetExtractLogs_Handler,
		},
		{
			MethodName: "checkUserExtractRisk",
			Handler:    _Trade_CheckUserExtractRisk_Handler,
		},
		{
			MethodName: "hnapayNewSelfAccount",
			Handler:    _Trade_HnapayNewSelfAccount_Handler,
		},
		{
			MethodName: "hnapayBindBankCard",
			Handler:    _Trade_HnapayBindBankCard_Handler,
		},
		{
			MethodName: "hnapayBindBankCardConfirm",
			Handler:    _Trade_HnapayBindBankCardConfirm_Handler,
		},
		{
			MethodName: "hnapayUnbindBankCard",
			Handler:    _Trade_HnapayUnbindBankCard_Handler,
		},
		{
			MethodName: "hnapayQuickPayOrder",
			Handler:    _Trade_HnapayQuickPayOrder_Handler,
		},
		{
			MethodName: "hnapayQuickPayConfirm",
			Handler:    _Trade_HnapayQuickPayConfirm_Handler,
		},
		{
			MethodName: "hnapayTransfer",
			Handler:    _Trade_HnapayTransfer_Handler,
		},
		{
			MethodName: "hnapayWithdraw",
			Handler:    _Trade_HnapayWithdraw_Handler,
		},
		{
			MethodName: "hnapayCheckUserAccountInfo",
			Handler:    _Trade_HnapayCheckUserAccountInfo_Handler,
		},
		{
			MethodName: "getNcountAccountInfo",
			Handler:    _Trade_GetNcountAccountInfo_Handler,
		},
		{
			MethodName: "setPaymentSecret",
			Handler:    _Trade_SetPaymentSecret_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chess_trade.proto",
}
