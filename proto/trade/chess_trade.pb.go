// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v3.21.12
// source: chess_trade.proto

package trade

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 预下单请求
type PrepaidReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 业务编码: 代理服：B1001 权益服：B1002
	BizCode string `protobuf:"bytes,1,opt,name=biz_code,json=bizCode,proto3" json:"biz_code,omitempty"`
	// 业务订单号
	OrderId string `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// 用户ID
	UserId uint64 `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 订单金额：分
	Amount uint32 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	// 业务回调地址: 例如代理商 new_chess.Agent
	NotifyUrl string `protobuf:"bytes,5,opt,name=notify_url,json=notifyUrl,proto3" json:"notify_url,omitempty"`
	// 支付渠道：1、微信，2、支付宝、3、小Q
	TradePlatform uint32 `protobuf:"varint,6,opt,name=trade_platform,json=tradePlatform,proto3" json:"trade_platform,omitempty"`
	// 支付编码: 对应支付配置表payments P1001:代理商微信h5支付，P1002: 小Q支付，P1003: 晋中微信支付
	PmCode string `protobuf:"bytes,7,opt,name=pm_code,json=pmCode,proto3" json:"pm_code,omitempty"`
	// 客户端IP
	ClientIp string `protobuf:"bytes,8,opt,name=client_ip,json=clientIp,proto3" json:"client_ip,omitempty"`
	// 订单描述
	Description string `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	// 微信jsapi渠道下：用户的openid 其他场景无需传
	Openid        string `protobuf:"bytes,10,opt,name=openid,proto3" json:"openid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrepaidReq) Reset() {
	*x = PrepaidReq{}
	mi := &file_chess_trade_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepaidReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepaidReq) ProtoMessage() {}

func (x *PrepaidReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepaidReq.ProtoReflect.Descriptor instead.
func (*PrepaidReq) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{0}
}

func (x *PrepaidReq) GetBizCode() string {
	if x != nil {
		return x.BizCode
	}
	return ""
}

func (x *PrepaidReq) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *PrepaidReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *PrepaidReq) GetAmount() uint32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *PrepaidReq) GetNotifyUrl() string {
	if x != nil {
		return x.NotifyUrl
	}
	return ""
}

func (x *PrepaidReq) GetTradePlatform() uint32 {
	if x != nil {
		return x.TradePlatform
	}
	return 0
}

func (x *PrepaidReq) GetPmCode() string {
	if x != nil {
		return x.PmCode
	}
	return ""
}

func (x *PrepaidReq) GetClientIp() string {
	if x != nil {
		return x.ClientIp
	}
	return ""
}

func (x *PrepaidReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PrepaidReq) GetOpenid() string {
	if x != nil {
		return x.Openid
	}
	return ""
}

// h5预下单响应
type H5PrepaidResp struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 0: OK, 否则失败
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 信息描述
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	// 交易号
	TradeId string `protobuf:"bytes,3,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	// 预支付地址
	PrepaidUrl    string `protobuf:"bytes,4,opt,name=prepaid_url,json=prepaidUrl,proto3" json:"prepaid_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *H5PrepaidResp) Reset() {
	*x = H5PrepaidResp{}
	mi := &file_chess_trade_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *H5PrepaidResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*H5PrepaidResp) ProtoMessage() {}

func (x *H5PrepaidResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use H5PrepaidResp.ProtoReflect.Descriptor instead.
func (*H5PrepaidResp) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{1}
}

func (x *H5PrepaidResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *H5PrepaidResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *H5PrepaidResp) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *H5PrepaidResp) GetPrepaidUrl() string {
	if x != nil {
		return x.PrepaidUrl
	}
	return ""
}

// jsapi下单响应
type JsapiPrepaidResp struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 0: OK, 否则失败
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 信息描述
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	// 预支付交易会话标识
	PrepayId string `protobuf:"bytes,3,opt,name=prepay_id,json=prepayId,proto3" json:"prepay_id,omitempty"`
	// 公众账号ID
	Appid string `protobuf:"bytes,4,opt,name=appid,proto3" json:"appid,omitempty"`
	// 订单详情扩展字符串，JSAPI下单接口返回的prepay_id参数值，提交格式如：prepay_id=***。
	Package string `protobuf:"bytes,5,opt,name=package,proto3" json:"package,omitempty"`
	// 随机字符串，不长于32位。该值建议使用随机数算法生成。
	Noncestr string `protobuf:"bytes,6,opt,name=noncestr,proto3" json:"noncestr,omitempty"`
	// Unix时间戳，是从1970年1月1日（UTC/GMT的午夜）开始所经过的秒数。
	Timestamp string `protobuf:"bytes,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// 签名，使用字段appId、timeStamp、nonceStr、package计算得出的签名值 注意：取值RSA格式。详细参考JSAPI调起支付签名
	PaySign string `protobuf:"bytes,8,opt,name=paySign,proto3" json:"paySign,omitempty"`
	// 平台交易号
	TradeId       string `protobuf:"bytes,9,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JsapiPrepaidResp) Reset() {
	*x = JsapiPrepaidResp{}
	mi := &file_chess_trade_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JsapiPrepaidResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JsapiPrepaidResp) ProtoMessage() {}

func (x *JsapiPrepaidResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JsapiPrepaidResp.ProtoReflect.Descriptor instead.
func (*JsapiPrepaidResp) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{2}
}

func (x *JsapiPrepaidResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *JsapiPrepaidResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *JsapiPrepaidResp) GetPrepayId() string {
	if x != nil {
		return x.PrepayId
	}
	return ""
}

func (x *JsapiPrepaidResp) GetAppid() string {
	if x != nil {
		return x.Appid
	}
	return ""
}

func (x *JsapiPrepaidResp) GetPackage() string {
	if x != nil {
		return x.Package
	}
	return ""
}

func (x *JsapiPrepaidResp) GetNoncestr() string {
	if x != nil {
		return x.Noncestr
	}
	return ""
}

func (x *JsapiPrepaidResp) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *JsapiPrepaidResp) GetPaySign() string {
	if x != nil {
		return x.PaySign
	}
	return ""
}

func (x *JsapiPrepaidResp) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

// 订单查询请求
type QueryOrderReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 业务订单号
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// 交易大类: 收款：RECV、提现：PAY、退款：REFUND、转账：TRAN
	QueryType     string `protobuf:"bytes,2,opt,name=query_type,json=queryType,proto3" json:"query_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryOrderReq) Reset() {
	*x = QueryOrderReq{}
	mi := &file_chess_trade_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryOrderReq) ProtoMessage() {}

func (x *QueryOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryOrderReq.ProtoReflect.Descriptor instead.
func (*QueryOrderReq) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{3}
}

func (x *QueryOrderReq) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *QueryOrderReq) GetQueryType() string {
	if x != nil {
		return x.QueryType
	}
	return ""
}

type OrderInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 交易号
	TradeId string `protobuf:"bytes,1,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	// 业务方订单号
	OrderId string `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// 订单状态：1、待支付，2、已支付，3、已取消
	OrderStatus uint32 `protobuf:"varint,3,opt,name=order_status,json=orderStatus,proto3" json:"order_status,omitempty"`
	// 业务编码
	BizCode string `protobuf:"bytes,4,opt,name=biz_code,json=bizCode,proto3" json:"biz_code,omitempty"`
	// 支付编码
	PmCode string `protobuf:"bytes,5,opt,name=pm_code,json=pmCode,proto3" json:"pm_code,omitempty"`
	// 支付渠道：1、微信，2、支付宝、3、小Q
	TradePlatform uint32 `protobuf:"varint,6,opt,name=trade_platform,json=tradePlatform,proto3" json:"trade_platform,omitempty"`
	// 订单金额：分
	Amount uint32 `protobuf:"varint,7,opt,name=amount,proto3" json:"amount,omitempty"`
	// 支付时间
	TradeTime string `protobuf:"bytes,8,opt,name=trade_time,json=tradeTime,proto3" json:"trade_time,omitempty"`
	// 原始数据
	Resource      string `protobuf:"bytes,9,opt,name=resource,proto3" json:"resource,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrderInfo) Reset() {
	*x = OrderInfo{}
	mi := &file_chess_trade_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderInfo) ProtoMessage() {}

func (x *OrderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderInfo.ProtoReflect.Descriptor instead.
func (*OrderInfo) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{4}
}

func (x *OrderInfo) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *OrderInfo) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *OrderInfo) GetOrderStatus() uint32 {
	if x != nil {
		return x.OrderStatus
	}
	return 0
}

func (x *OrderInfo) GetBizCode() string {
	if x != nil {
		return x.BizCode
	}
	return ""
}

func (x *OrderInfo) GetPmCode() string {
	if x != nil {
		return x.PmCode
	}
	return ""
}

func (x *OrderInfo) GetTradePlatform() uint32 {
	if x != nil {
		return x.TradePlatform
	}
	return 0
}

func (x *OrderInfo) GetAmount() uint32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *OrderInfo) GetTradeTime() string {
	if x != nil {
		return x.TradeTime
	}
	return ""
}

func (x *OrderInfo) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

// 订单查询响应
type QueryOrderResp struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 0: OK, 否则失败
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 信息描述
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	// 订单信息 json串
	OrderInfo     *OrderInfo `protobuf:"bytes,3,opt,name=order_info,json=orderInfo,proto3" json:"order_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryOrderResp) Reset() {
	*x = QueryOrderResp{}
	mi := &file_chess_trade_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryOrderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryOrderResp) ProtoMessage() {}

func (x *QueryOrderResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryOrderResp.ProtoReflect.Descriptor instead.
func (*QueryOrderResp) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{5}
}

func (x *QueryOrderResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryOrderResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *QueryOrderResp) GetOrderInfo() *OrderInfo {
	if x != nil {
		return x.OrderInfo
	}
	return nil
}

// 订单取消请求
type CancelOrderReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 业务订单号
	OrderId       string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelOrderReq) Reset() {
	*x = CancelOrderReq{}
	mi := &file_chess_trade_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelOrderReq) ProtoMessage() {}

func (x *CancelOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelOrderReq.ProtoReflect.Descriptor instead.
func (*CancelOrderReq) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{6}
}

func (x *CancelOrderReq) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

// 订单取消响应
type CancelOrderResp struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 0: OK, 否则失败
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 信息描述
	Msg           string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelOrderResp) Reset() {
	*x = CancelOrderResp{}
	mi := &file_chess_trade_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelOrderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelOrderResp) ProtoMessage() {}

func (x *CancelOrderResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelOrderResp.ProtoReflect.Descriptor instead.
func (*CancelOrderResp) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{7}
}

func (x *CancelOrderResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CancelOrderResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 订单退款请求
type RefundOrderReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 业务编码: 代理服：B1001 权益服：B1002
	BizCode string `protobuf:"bytes,1,opt,name=biz_code,json=bizCode,proto3" json:"biz_code,omitempty"`
	// 业务订单号
	OrderId string `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// 退款金额：分
	RefundAmount uint32 `protobuf:"varint,3,opt,name=refund_amount,json=refundAmount,proto3" json:"refund_amount,omitempty"`
	// 订单描述
	Description   string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RefundOrderReq) Reset() {
	*x = RefundOrderReq{}
	mi := &file_chess_trade_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RefundOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundOrderReq) ProtoMessage() {}

func (x *RefundOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundOrderReq.ProtoReflect.Descriptor instead.
func (*RefundOrderReq) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{8}
}

func (x *RefundOrderReq) GetBizCode() string {
	if x != nil {
		return x.BizCode
	}
	return ""
}

func (x *RefundOrderReq) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *RefundOrderReq) GetRefundAmount() uint32 {
	if x != nil {
		return x.RefundAmount
	}
	return 0
}

func (x *RefundOrderReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// 订单退款响应
type RefundOrderResp struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 0: OK, 否则失败
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 信息描述
	Msg           string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RefundOrderResp) Reset() {
	*x = RefundOrderResp{}
	mi := &file_chess_trade_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RefundOrderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundOrderResp) ProtoMessage() {}

func (x *RefundOrderResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundOrderResp.ProtoReflect.Descriptor instead.
func (*RefundOrderResp) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{9}
}

func (x *RefundOrderResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RefundOrderResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// app下单响应
type AppPrepaidResp struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 0: OK, 否则失败
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 信息描述
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	// 第三方交易号
	Prepayid  string `protobuf:"bytes,3,opt,name=prepayid,proto3" json:"prepayid,omitempty"`
	Appid     string `protobuf:"bytes,4,opt,name=appid,proto3" json:"appid,omitempty"`
	Partnerid string `protobuf:"bytes,5,opt,name=partnerid,proto3" json:"partnerid,omitempty"`
	Package   string `protobuf:"bytes,6,opt,name=package,proto3" json:"package,omitempty"`
	Noncestr  string `protobuf:"bytes,7,opt,name=noncestr,proto3" json:"noncestr,omitempty"`
	Timestamp string `protobuf:"bytes,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Sign      string `protobuf:"bytes,9,opt,name=sign,proto3" json:"sign,omitempty"`
	// 平台交易号
	TradeId       string `protobuf:"bytes,10,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AppPrepaidResp) Reset() {
	*x = AppPrepaidResp{}
	mi := &file_chess_trade_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppPrepaidResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppPrepaidResp) ProtoMessage() {}

func (x *AppPrepaidResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppPrepaidResp.ProtoReflect.Descriptor instead.
func (*AppPrepaidResp) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{10}
}

func (x *AppPrepaidResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AppPrepaidResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *AppPrepaidResp) GetPrepayid() string {
	if x != nil {
		return x.Prepayid
	}
	return ""
}

func (x *AppPrepaidResp) GetAppid() string {
	if x != nil {
		return x.Appid
	}
	return ""
}

func (x *AppPrepaidResp) GetPartnerid() string {
	if x != nil {
		return x.Partnerid
	}
	return ""
}

func (x *AppPrepaidResp) GetPackage() string {
	if x != nil {
		return x.Package
	}
	return ""
}

func (x *AppPrepaidResp) GetNoncestr() string {
	if x != nil {
		return x.Noncestr
	}
	return ""
}

func (x *AppPrepaidResp) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *AppPrepaidResp) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

func (x *AppPrepaidResp) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

// 新生账户提现至银行卡请求
type WithdrawBankCardReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 支付渠道：1、微信，2、支付宝，3、小Q，4、新生
	TradePlatform uint32 `protobuf:"varint,1,opt,name=trade_platform,json=tradePlatform,proto3" json:"trade_platform,omitempty"`
	// 支付编码: 对应支付配置表payments P1006、新生支付下的兴动竞技商户
	PmCode string `protobuf:"bytes,2,opt,name=pm_code,json=pmCode,proto3" json:"pm_code,omitempty"`
	// 订单号
	OrderId string `protobuf:"bytes,3,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// 用户ID
	UserId uint64 `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 绑卡协议号
	BindCardAgrNo string `protobuf:"bytes,5,opt,name=bind_card_agr_no,json=bindCardAgrNo,proto3" json:"bind_card_agr_no,omitempty"`
	// 提现金额 单位：分
	Amount uint32 `protobuf:"varint,6,opt,name=amount,proto3" json:"amount,omitempty"`
	// 支付密码(md5加密后传输)
	PaymentPassword string `protobuf:"bytes,7,opt,name=payment_password,json=paymentPassword,proto3" json:"payment_password,omitempty"`
	// 业务回调地址 哪个服务下的具体回调方法：/new_chess.RightsServer/withdraw
	NotifyUrl string `protobuf:"bytes,8,opt,name=notify_url,json=notifyUrl,proto3" json:"notify_url,omitempty"`
	// 订单描述
	Description string `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	// ip需上传真实服务器ip，获取不到的值可空
	ClientIp      string `protobuf:"bytes,10,opt,name=client_ip,json=clientIp,proto3" json:"client_ip,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WithdrawBankCardReq) Reset() {
	*x = WithdrawBankCardReq{}
	mi := &file_chess_trade_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WithdrawBankCardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawBankCardReq) ProtoMessage() {}

func (x *WithdrawBankCardReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawBankCardReq.ProtoReflect.Descriptor instead.
func (*WithdrawBankCardReq) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{11}
}

func (x *WithdrawBankCardReq) GetTradePlatform() uint32 {
	if x != nil {
		return x.TradePlatform
	}
	return 0
}

func (x *WithdrawBankCardReq) GetPmCode() string {
	if x != nil {
		return x.PmCode
	}
	return ""
}

func (x *WithdrawBankCardReq) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *WithdrawBankCardReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *WithdrawBankCardReq) GetBindCardAgrNo() string {
	if x != nil {
		return x.BindCardAgrNo
	}
	return ""
}

func (x *WithdrawBankCardReq) GetAmount() uint32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *WithdrawBankCardReq) GetPaymentPassword() string {
	if x != nil {
		return x.PaymentPassword
	}
	return ""
}

func (x *WithdrawBankCardReq) GetNotifyUrl() string {
	if x != nil {
		return x.NotifyUrl
	}
	return ""
}

func (x *WithdrawBankCardReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *WithdrawBankCardReq) GetClientIp() string {
	if x != nil {
		return x.ClientIp
	}
	return ""
}

// 新生账户提现至银行卡响应
type WithdrawBankCardResp struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 0: OK, 否则失败
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 信息描述
	Msg           string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WithdrawBankCardResp) Reset() {
	*x = WithdrawBankCardResp{}
	mi := &file_chess_trade_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WithdrawBankCardResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawBankCardResp) ProtoMessage() {}

func (x *WithdrawBankCardResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawBankCardResp.ProtoReflect.Descriptor instead.
func (*WithdrawBankCardResp) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{12}
}

func (x *WithdrawBankCardResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *WithdrawBankCardResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 提现订单查询请求
type QueryExtractOrderReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 业务订单号
	OrderId       string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryExtractOrderReq) Reset() {
	*x = QueryExtractOrderReq{}
	mi := &file_chess_trade_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryExtractOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryExtractOrderReq) ProtoMessage() {}

func (x *QueryExtractOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryExtractOrderReq.ProtoReflect.Descriptor instead.
func (*QueryExtractOrderReq) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{13}
}

func (x *QueryExtractOrderReq) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

// 订单查询响应
type QueryExtractOrderResp struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 0: OK, 否则失败
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 信息描述
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	// 订单信息 json串
	OrderInfo     *OrderInfo `protobuf:"bytes,3,opt,name=order_info,json=orderInfo,proto3" json:"order_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryExtractOrderResp) Reset() {
	*x = QueryExtractOrderResp{}
	mi := &file_chess_trade_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryExtractOrderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryExtractOrderResp) ProtoMessage() {}

func (x *QueryExtractOrderResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryExtractOrderResp.ProtoReflect.Descriptor instead.
func (*QueryExtractOrderResp) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{14}
}

func (x *QueryExtractOrderResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryExtractOrderResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *QueryExtractOrderResp) GetOrderInfo() *OrderInfo {
	if x != nil {
		return x.OrderInfo
	}
	return nil
}

// 提现全局配置请求
type SaveExtractConfigReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 提现功能总开关：1、开启
	ExtractSwitch uint32 `protobuf:"varint,1,opt,name=extract_switch,json=extractSwitch,proto3" json:"extract_switch,omitempty"`
	// 默认用户当日提现额度
	TodayLimit uint32 `protobuf:"varint,2,opt,name=today_limit,json=todayLimit,proto3" json:"today_limit,omitempty"`
	// 资金池安全阀值, 触发告警
	SafetyValue uint32 `protobuf:"varint,3,opt,name=safety_value,json=safetyValue,proto3" json:"safety_value,omitempty"`
	// 提现服务费比例
	ServiceFee    float64 `protobuf:"fixed64,4,opt,name=service_fee,json=serviceFee,proto3" json:"service_fee,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SaveExtractConfigReq) Reset() {
	*x = SaveExtractConfigReq{}
	mi := &file_chess_trade_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveExtractConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveExtractConfigReq) ProtoMessage() {}

func (x *SaveExtractConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveExtractConfigReq.ProtoReflect.Descriptor instead.
func (*SaveExtractConfigReq) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{15}
}

func (x *SaveExtractConfigReq) GetExtractSwitch() uint32 {
	if x != nil {
		return x.ExtractSwitch
	}
	return 0
}

func (x *SaveExtractConfigReq) GetTodayLimit() uint32 {
	if x != nil {
		return x.TodayLimit
	}
	return 0
}

func (x *SaveExtractConfigReq) GetSafetyValue() uint32 {
	if x != nil {
		return x.SafetyValue
	}
	return 0
}

func (x *SaveExtractConfigReq) GetServiceFee() float64 {
	if x != nil {
		return x.ServiceFee
	}
	return 0
}

// 提现全局配置响应
type SaveExtractConfigResp struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 0: OK, 否则失败
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 信息描述
	Msg           string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SaveExtractConfigResp) Reset() {
	*x = SaveExtractConfigResp{}
	mi := &file_chess_trade_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveExtractConfigResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveExtractConfigResp) ProtoMessage() {}

func (x *SaveExtractConfigResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveExtractConfigResp.ProtoReflect.Descriptor instead.
func (*SaveExtractConfigResp) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{16}
}

func (x *SaveExtractConfigResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SaveExtractConfigResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 提现用户配置请求
type SaveExtractUserConfigReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 用户ID
	UserId uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 提现功能总开关：1、开启
	ExtractSwitch uint32 `protobuf:"varint,2,opt,name=extract_switch,json=extractSwitch,proto3" json:"extract_switch,omitempty"`
	// 用户当日提现额度
	TodayLimit uint32 `protobuf:"varint,3,opt,name=today_limit,json=todayLimit,proto3" json:"today_limit,omitempty"`
	// 单笔限额
	SingleLimit uint32 `protobuf:"varint,4,opt,name=single_limit,json=singleLimit,proto3" json:"single_limit,omitempty"`
	// 提现频次
	TodayCnt      uint32 `protobuf:"varint,5,opt,name=today_cnt,json=todayCnt,proto3" json:"today_cnt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SaveExtractUserConfigReq) Reset() {
	*x = SaveExtractUserConfigReq{}
	mi := &file_chess_trade_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveExtractUserConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveExtractUserConfigReq) ProtoMessage() {}

func (x *SaveExtractUserConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveExtractUserConfigReq.ProtoReflect.Descriptor instead.
func (*SaveExtractUserConfigReq) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{17}
}

func (x *SaveExtractUserConfigReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SaveExtractUserConfigReq) GetExtractSwitch() uint32 {
	if x != nil {
		return x.ExtractSwitch
	}
	return 0
}

func (x *SaveExtractUserConfigReq) GetTodayLimit() uint32 {
	if x != nil {
		return x.TodayLimit
	}
	return 0
}

func (x *SaveExtractUserConfigReq) GetSingleLimit() uint32 {
	if x != nil {
		return x.SingleLimit
	}
	return 0
}

func (x *SaveExtractUserConfigReq) GetTodayCnt() uint32 {
	if x != nil {
		return x.TodayCnt
	}
	return 0
}

// 提现用户配置响应
type SaveExtractUserConfigResp struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 0: OK, 否则失败
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 信息描述
	Msg           string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SaveExtractUserConfigResp) Reset() {
	*x = SaveExtractUserConfigResp{}
	mi := &file_chess_trade_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveExtractUserConfigResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveExtractUserConfigResp) ProtoMessage() {}

func (x *SaveExtractUserConfigResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveExtractUserConfigResp.ProtoReflect.Descriptor instead.
func (*SaveExtractUserConfigResp) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{18}
}

func (x *SaveExtractUserConfigResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SaveExtractUserConfigResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type GetExtractConfigReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetExtractConfigReq) Reset() {
	*x = GetExtractConfigReq{}
	mi := &file_chess_trade_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetExtractConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExtractConfigReq) ProtoMessage() {}

func (x *GetExtractConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExtractConfigReq.ProtoReflect.Descriptor instead.
func (*GetExtractConfigReq) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{19}
}

type GetExtractConfigResp struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 0: OK, 否则失败
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 信息描述
	Msg           string                `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          *SaveExtractConfigReq `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetExtractConfigResp) Reset() {
	*x = GetExtractConfigResp{}
	mi := &file_chess_trade_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetExtractConfigResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExtractConfigResp) ProtoMessage() {}

func (x *GetExtractConfigResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExtractConfigResp.ProtoReflect.Descriptor instead.
func (*GetExtractConfigResp) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{20}
}

func (x *GetExtractConfigResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetExtractConfigResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetExtractConfigResp) GetData() *SaveExtractConfigReq {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetExtractUserConfigReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 用户ID
	UserId        uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetExtractUserConfigReq) Reset() {
	*x = GetExtractUserConfigReq{}
	mi := &file_chess_trade_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetExtractUserConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExtractUserConfigReq) ProtoMessage() {}

func (x *GetExtractUserConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExtractUserConfigReq.ProtoReflect.Descriptor instead.
func (*GetExtractUserConfigReq) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{21}
}

func (x *GetExtractUserConfigReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type GetExtractUserConfigResp struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 0: OK, 否则失败
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 信息描述
	Msg           string                    `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          *SaveExtractUserConfigReq `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetExtractUserConfigResp) Reset() {
	*x = GetExtractUserConfigResp{}
	mi := &file_chess_trade_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetExtractUserConfigResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExtractUserConfigResp) ProtoMessage() {}

func (x *GetExtractUserConfigResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExtractUserConfigResp.ProtoReflect.Descriptor instead.
func (*GetExtractUserConfigResp) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{22}
}

func (x *GetExtractUserConfigResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetExtractUserConfigResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetExtractUserConfigResp) GetData() *SaveExtractUserConfigReq {
	if x != nil {
		return x.Data
	}
	return nil
}

// 获取提现日志请求
type GetExtractLogsReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ExtractDate   string                 `protobuf:"bytes,1,opt,name=extract_date,json=extractDate,proto3" json:"extract_date,omitempty"`  // 日期: 今日、昨日、前日: 2025-06-23
	UserId        uint64                 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                // 用户ID
	OrderStatus   uint32                 `protobuf:"varint,3,opt,name=order_status,json=orderStatus,proto3" json:"order_status,omitempty"` // 状态：1、被封控，2、转账失败，3、转账处理中，4、提现失败，5、提现处理中，6、提现成功
	Page          uint32                 `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`                                  // 当前页
	PageSize      uint32                 `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`          // 每页数量
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetExtractLogsReq) Reset() {
	*x = GetExtractLogsReq{}
	mi := &file_chess_trade_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetExtractLogsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExtractLogsReq) ProtoMessage() {}

func (x *GetExtractLogsReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExtractLogsReq.ProtoReflect.Descriptor instead.
func (*GetExtractLogsReq) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{23}
}

func (x *GetExtractLogsReq) GetExtractDate() string {
	if x != nil {
		return x.ExtractDate
	}
	return ""
}

func (x *GetExtractLogsReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetExtractLogsReq) GetOrderStatus() uint32 {
	if x != nil {
		return x.OrderStatus
	}
	return 0
}

func (x *GetExtractLogsReq) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetExtractLogsReq) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ExtractLogInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        uint64                 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                // 用户ID
	Date          string                 `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`                                   // 日期
	OrderStatus   uint32                 `protobuf:"varint,3,opt,name=order_status,json=orderStatus,proto3" json:"order_status,omitempty"` // 状态：1、被封控，2、转账失败，3、转账处理中，4、提现失败，5、提现处理中，6、提现成功
	ErrMsg        string                 `protobuf:"bytes,4,opt,name=err_msg,json=errMsg,proto3" json:"err_msg,omitempty"`                 // 错误信息
	Amount        float64                `protobuf:"fixed64,5,opt,name=amount,proto3" json:"amount,omitempty"`                             // 提现金额
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExtractLogInfo) Reset() {
	*x = ExtractLogInfo{}
	mi := &file_chess_trade_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtractLogInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractLogInfo) ProtoMessage() {}

func (x *ExtractLogInfo) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractLogInfo.ProtoReflect.Descriptor instead.
func (*ExtractLogInfo) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{24}
}

func (x *ExtractLogInfo) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ExtractLogInfo) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *ExtractLogInfo) GetOrderStatus() uint32 {
	if x != nil {
		return x.OrderStatus
	}
	return 0
}

func (x *ExtractLogInfo) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

func (x *ExtractLogInfo) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type ExtractLogsData struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Total           int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`                                               // 总条数
	TotalExtractAmt float64                `protobuf:"fixed64,2,opt,name=total_extract_amt,json=totalExtractAmt,proto3" json:"total_extract_amt,omitempty"` // 提现总额
	SuccessRate     float32                `protobuf:"fixed32,3,opt,name=success_rate,json=successRate,proto3" json:"success_rate,omitempty"`               // 成功率
	InterceptRate   float32                `protobuf:"fixed32,4,opt,name=intercept_rate,json=interceptRate,proto3" json:"intercept_rate,omitempty"`         // 拦截率
	List            []*ExtractLogInfo      `protobuf:"bytes,5,rep,name=list,proto3" json:"list,omitempty"`                                                  // 流水列表
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ExtractLogsData) Reset() {
	*x = ExtractLogsData{}
	mi := &file_chess_trade_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtractLogsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractLogsData) ProtoMessage() {}

func (x *ExtractLogsData) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractLogsData.ProtoReflect.Descriptor instead.
func (*ExtractLogsData) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{25}
}

func (x *ExtractLogsData) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ExtractLogsData) GetTotalExtractAmt() float64 {
	if x != nil {
		return x.TotalExtractAmt
	}
	return 0
}

func (x *ExtractLogsData) GetSuccessRate() float32 {
	if x != nil {
		return x.SuccessRate
	}
	return 0
}

func (x *ExtractLogsData) GetInterceptRate() float32 {
	if x != nil {
		return x.InterceptRate
	}
	return 0
}

func (x *ExtractLogsData) GetList() []*ExtractLogInfo {
	if x != nil {
		return x.List
	}
	return nil
}

// 获取提现日志响应
type GetExtractLogsResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	Data          *ExtractLogsData       `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`  // 流水记录
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetExtractLogsResp) Reset() {
	*x = GetExtractLogsResp{}
	mi := &file_chess_trade_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetExtractLogsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExtractLogsResp) ProtoMessage() {}

func (x *GetExtractLogsResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExtractLogsResp.ProtoReflect.Descriptor instead.
func (*GetExtractLogsResp) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{26}
}

func (x *GetExtractLogsResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetExtractLogsResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetExtractLogsResp) GetData() *ExtractLogsData {
	if x != nil {
		return x.Data
	}
	return nil
}

// 检查用户是否被提现封控请求
type CheckUserExtractRiskReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckUserExtractRiskReq) Reset() {
	*x = CheckUserExtractRiskReq{}
	mi := &file_chess_trade_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckUserExtractRiskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserExtractRiskReq) ProtoMessage() {}

func (x *CheckUserExtractRiskReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserExtractRiskReq.ProtoReflect.Descriptor instead.
func (*CheckUserExtractRiskReq) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{27}
}

type CheckUserExtractRiskData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ErrCode       int32                  `protobuf:"varint,1,opt,name=err_code,json=errCode,proto3" json:"err_code,omitempty"`
	ErrMsg        string                 `protobuf:"bytes,2,opt,name=err_msg,json=errMsg,proto3" json:"err_msg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckUserExtractRiskData) Reset() {
	*x = CheckUserExtractRiskData{}
	mi := &file_chess_trade_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckUserExtractRiskData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserExtractRiskData) ProtoMessage() {}

func (x *CheckUserExtractRiskData) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserExtractRiskData.ProtoReflect.Descriptor instead.
func (*CheckUserExtractRiskData) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{28}
}

func (x *CheckUserExtractRiskData) GetErrCode() int32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

func (x *CheckUserExtractRiskData) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

// 检查用户是否被提现封控响应
type CheckUserExtractRiskResp struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Code          int32                     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                    `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	Data          *CheckUserExtractRiskData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckUserExtractRiskResp) Reset() {
	*x = CheckUserExtractRiskResp{}
	mi := &file_chess_trade_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckUserExtractRiskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserExtractRiskResp) ProtoMessage() {}

func (x *CheckUserExtractRiskResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserExtractRiskResp.ProtoReflect.Descriptor instead.
func (*CheckUserExtractRiskResp) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{29}
}

func (x *CheckUserExtractRiskResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CheckUserExtractRiskResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CheckUserExtractRiskResp) GetData() *CheckUserExtractRiskData {
	if x != nil {
		return x.Data
	}
	return nil
}

// 新生个人开户请求
type HnapayNewSelfAccountReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 业务编码
	BizCode string `protobuf:"bytes,1,opt,name=biz_code,json=bizCode,proto3" json:"biz_code,omitempty"`
	// 支付编码
	PmCode string `protobuf:"bytes,2,opt,name=pm_code,json=pmCode,proto3" json:"pm_code,omitempty"`
	// 商户用户唯一标识: 按照商户侧规则同一个平台商户唯一字符串类型 如： xsqianyi1_14808061002
	MerUserId string `protobuf:"bytes,3,opt,name=mer_user_id,json=merUserId,proto3" json:"mer_user_id,omitempty"`
	// 用户手机号: 用户本人在运营商已实名的手机号
	Mobile string `protobuf:"bytes,4,opt,name=mobile,proto3" json:"mobile,omitempty"`
	// 真实姓名
	Realname string `protobuf:"bytes,5,opt,name=realname,proto3" json:"realname,omitempty"`
	// 身份证号
	IdCard string `protobuf:"bytes,6,opt,name=id_card,json=idCard,proto3" json:"id_card,omitempty"`
	// 是否主账户：true、是
	IsMainAccount bool `protobuf:"varint,7,opt,name=is_main_account,json=isMainAccount,proto3" json:"is_main_account,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HnapayNewSelfAccountReq) Reset() {
	*x = HnapayNewSelfAccountReq{}
	mi := &file_chess_trade_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HnapayNewSelfAccountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HnapayNewSelfAccountReq) ProtoMessage() {}

func (x *HnapayNewSelfAccountReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HnapayNewSelfAccountReq.ProtoReflect.Descriptor instead.
func (*HnapayNewSelfAccountReq) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{30}
}

func (x *HnapayNewSelfAccountReq) GetBizCode() string {
	if x != nil {
		return x.BizCode
	}
	return ""
}

func (x *HnapayNewSelfAccountReq) GetPmCode() string {
	if x != nil {
		return x.PmCode
	}
	return ""
}

func (x *HnapayNewSelfAccountReq) GetMerUserId() string {
	if x != nil {
		return x.MerUserId
	}
	return ""
}

func (x *HnapayNewSelfAccountReq) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *HnapayNewSelfAccountReq) GetRealname() string {
	if x != nil {
		return x.Realname
	}
	return ""
}

func (x *HnapayNewSelfAccountReq) GetIdCard() string {
	if x != nil {
		return x.IdCard
	}
	return ""
}

func (x *HnapayNewSelfAccountReq) GetIsMainAccount() bool {
	if x != nil {
		return x.IsMainAccount
	}
	return false
}

type HnapayNewSelfAccountData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 新生侧开户成功返回的 用户编号
	UserId        string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HnapayNewSelfAccountData) Reset() {
	*x = HnapayNewSelfAccountData{}
	mi := &file_chess_trade_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HnapayNewSelfAccountData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HnapayNewSelfAccountData) ProtoMessage() {}

func (x *HnapayNewSelfAccountData) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HnapayNewSelfAccountData.ProtoReflect.Descriptor instead.
func (*HnapayNewSelfAccountData) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{31}
}

func (x *HnapayNewSelfAccountData) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// 新生个人开户响应
type HnapayNewSelfAccountResp struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Code          int32                     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                    `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	Data          *HnapayNewSelfAccountData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HnapayNewSelfAccountResp) Reset() {
	*x = HnapayNewSelfAccountResp{}
	mi := &file_chess_trade_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HnapayNewSelfAccountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HnapayNewSelfAccountResp) ProtoMessage() {}

func (x *HnapayNewSelfAccountResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HnapayNewSelfAccountResp.ProtoReflect.Descriptor instead.
func (*HnapayNewSelfAccountResp) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{32}
}

func (x *HnapayNewSelfAccountResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *HnapayNewSelfAccountResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *HnapayNewSelfAccountResp) GetData() *HnapayNewSelfAccountData {
	if x != nil {
		return x.Data
	}
	return nil
}

// 新生个人用户绑卡请求
type HnapayBindBankCardReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 业务编码
	BizCode string `protobuf:"bytes,1,opt,name=biz_code,json=bizCode,proto3" json:"biz_code,omitempty"`
	// 支付编码
	PmCode string `protobuf:"bytes,2,opt,name=pm_code,json=pmCode,proto3" json:"pm_code,omitempty"`
	// 支付银行卡卡号
	CardNo string `protobuf:"bytes,3,opt,name=card_no,json=cardNo,proto3" json:"card_no,omitempty"`
	// 持卡人姓名
	HolderName string `protobuf:"bytes,4,opt,name=holder_name,json=holderName,proto3" json:"holder_name,omitempty"`
	// 银行签约手机号
	Mobile string `protobuf:"bytes,5,opt,name=mobile,proto3" json:"mobile,omitempty"`
	// 信用卡有效期: 信用卡不可空
	CardAvailableDate string `protobuf:"bytes,6,opt,name=card_available_date,json=cardAvailableDate,proto3" json:"card_available_date,omitempty"`
	// 信用卡CVV2: 信用卡不可空
	Cvv2          string `protobuf:"bytes,7,opt,name=cvv2,proto3" json:"cvv2,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HnapayBindBankCardReq) Reset() {
	*x = HnapayBindBankCardReq{}
	mi := &file_chess_trade_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HnapayBindBankCardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HnapayBindBankCardReq) ProtoMessage() {}

func (x *HnapayBindBankCardReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HnapayBindBankCardReq.ProtoReflect.Descriptor instead.
func (*HnapayBindBankCardReq) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{33}
}

func (x *HnapayBindBankCardReq) GetBizCode() string {
	if x != nil {
		return x.BizCode
	}
	return ""
}

func (x *HnapayBindBankCardReq) GetPmCode() string {
	if x != nil {
		return x.PmCode
	}
	return ""
}

func (x *HnapayBindBankCardReq) GetCardNo() string {
	if x != nil {
		return x.CardNo
	}
	return ""
}

func (x *HnapayBindBankCardReq) GetHolderName() string {
	if x != nil {
		return x.HolderName
	}
	return ""
}

func (x *HnapayBindBankCardReq) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *HnapayBindBankCardReq) GetCardAvailableDate() string {
	if x != nil {
		return x.CardAvailableDate
	}
	return ""
}

func (x *HnapayBindBankCardReq) GetCvv2() string {
	if x != nil {
		return x.Cvv2
	}
	return ""
}

type HnapayBindBankCardData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 签约下单成功后平台生成的银行卡ID（签约后续流程使用）
	BankCardId uint32 `protobuf:"varint,1,opt,name=bank_card_id,json=bankCardId,proto3" json:"bank_card_id,omitempty"`
	// 签约订单号
	NcountOrderId string `protobuf:"bytes,2,opt,name=ncount_order_id,json=ncountOrderId,proto3" json:"ncount_order_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HnapayBindBankCardData) Reset() {
	*x = HnapayBindBankCardData{}
	mi := &file_chess_trade_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HnapayBindBankCardData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HnapayBindBankCardData) ProtoMessage() {}

func (x *HnapayBindBankCardData) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HnapayBindBankCardData.ProtoReflect.Descriptor instead.
func (*HnapayBindBankCardData) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{34}
}

func (x *HnapayBindBankCardData) GetBankCardId() uint32 {
	if x != nil {
		return x.BankCardId
	}
	return 0
}

func (x *HnapayBindBankCardData) GetNcountOrderId() string {
	if x != nil {
		return x.NcountOrderId
	}
	return ""
}

// 新生个人用户绑卡响应
type HnapayBindBankCardResp struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Code          int32                   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                  `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	Data          *HnapayBindBankCardData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HnapayBindBankCardResp) Reset() {
	*x = HnapayBindBankCardResp{}
	mi := &file_chess_trade_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HnapayBindBankCardResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HnapayBindBankCardResp) ProtoMessage() {}

func (x *HnapayBindBankCardResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HnapayBindBankCardResp.ProtoReflect.Descriptor instead.
func (*HnapayBindBankCardResp) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{35}
}

func (x *HnapayBindBankCardResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *HnapayBindBankCardResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *HnapayBindBankCardResp) GetData() *HnapayBindBankCardData {
	if x != nil {
		return x.Data
	}
	return nil
}

// 新生个人用户绑卡确认请求
type HnapayBindBankCardConfirmReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 业务编码
	BizCode string `protobuf:"bytes,1,opt,name=biz_code,json=bizCode,proto3" json:"biz_code,omitempty"`
	// 支付编码
	PmCode string `protobuf:"bytes,2,opt,name=pm_code,json=pmCode,proto3" json:"pm_code,omitempty"`
	// 平台订单号: 签约请求下单接口响应的银行卡ID
	NcountOrderId string `protobuf:"bytes,3,opt,name=ncount_order_id,json=ncountOrderId,proto3" json:"ncount_order_id,omitempty"`
	// 签约短信验证码
	SmsCode       string `protobuf:"bytes,4,opt,name=sms_code,json=smsCode,proto3" json:"sms_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HnapayBindBankCardConfirmReq) Reset() {
	*x = HnapayBindBankCardConfirmReq{}
	mi := &file_chess_trade_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HnapayBindBankCardConfirmReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HnapayBindBankCardConfirmReq) ProtoMessage() {}

func (x *HnapayBindBankCardConfirmReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HnapayBindBankCardConfirmReq.ProtoReflect.Descriptor instead.
func (*HnapayBindBankCardConfirmReq) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{36}
}

func (x *HnapayBindBankCardConfirmReq) GetBizCode() string {
	if x != nil {
		return x.BizCode
	}
	return ""
}

func (x *HnapayBindBankCardConfirmReq) GetPmCode() string {
	if x != nil {
		return x.PmCode
	}
	return ""
}

func (x *HnapayBindBankCardConfirmReq) GetNcountOrderId() string {
	if x != nil {
		return x.NcountOrderId
	}
	return ""
}

func (x *HnapayBindBankCardConfirmReq) GetSmsCode() string {
	if x != nil {
		return x.SmsCode
	}
	return ""
}

type HnapayBindBankCardConfirmData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BindCardAgrNo string                 `protobuf:"bytes,1,opt,name=bind_card_agr_no,json=bindCardAgrNo,proto3" json:"bind_card_agr_no,omitempty"` // 绑卡协议号
	BankCode      string                 `protobuf:"bytes,2,opt,name=bank_code,json=bankCode,proto3" json:"bank_code,omitempty"`                    // 签约银行简码
	CardType      string                 `protobuf:"bytes,3,opt,name=card_type,json=cardType,proto3" json:"card_type,omitempty"`                    // 支付银行卡卡类型: 1:借记卡(DEBITCARD) 2:信用卡(CREDITCARD)
	ShortCardNo   string                 `protobuf:"bytes,4,opt,name=short_card_no,json=shortCardNo,proto3" json:"short_card_no,omitempty"`         // 签约银行卡后四位
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HnapayBindBankCardConfirmData) Reset() {
	*x = HnapayBindBankCardConfirmData{}
	mi := &file_chess_trade_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HnapayBindBankCardConfirmData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HnapayBindBankCardConfirmData) ProtoMessage() {}

func (x *HnapayBindBankCardConfirmData) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HnapayBindBankCardConfirmData.ProtoReflect.Descriptor instead.
func (*HnapayBindBankCardConfirmData) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{37}
}

func (x *HnapayBindBankCardConfirmData) GetBindCardAgrNo() string {
	if x != nil {
		return x.BindCardAgrNo
	}
	return ""
}

func (x *HnapayBindBankCardConfirmData) GetBankCode() string {
	if x != nil {
		return x.BankCode
	}
	return ""
}

func (x *HnapayBindBankCardConfirmData) GetCardType() string {
	if x != nil {
		return x.CardType
	}
	return ""
}

func (x *HnapayBindBankCardConfirmData) GetShortCardNo() string {
	if x != nil {
		return x.ShortCardNo
	}
	return ""
}

// 新生个人用户绑卡确认响应
type HnapayBindBankCardConfirmResp struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Code          int32                          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                         `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	Data          *HnapayBindBankCardConfirmData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HnapayBindBankCardConfirmResp) Reset() {
	*x = HnapayBindBankCardConfirmResp{}
	mi := &file_chess_trade_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HnapayBindBankCardConfirmResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HnapayBindBankCardConfirmResp) ProtoMessage() {}

func (x *HnapayBindBankCardConfirmResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HnapayBindBankCardConfirmResp.ProtoReflect.Descriptor instead.
func (*HnapayBindBankCardConfirmResp) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{38}
}

func (x *HnapayBindBankCardConfirmResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *HnapayBindBankCardConfirmResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *HnapayBindBankCardConfirmResp) GetData() *HnapayBindBankCardConfirmData {
	if x != nil {
		return x.Data
	}
	return nil
}

// 新生个人用户解绑银行卡请求
type HnapayUnbindBankCardReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 业务编码
	BizCode string `protobuf:"bytes,1,opt,name=biz_code,json=bizCode,proto3" json:"biz_code,omitempty"`
	// 支付编码
	PmCode string `protobuf:"bytes,2,opt,name=pm_code,json=pmCode,proto3" json:"pm_code,omitempty"`
	// 原绑卡协议号
	BindCardAgrNo string `protobuf:"bytes,3,opt,name=bind_card_agr_no,json=bindCardAgrNo,proto3" json:"bind_card_agr_no,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HnapayUnbindBankCardReq) Reset() {
	*x = HnapayUnbindBankCardReq{}
	mi := &file_chess_trade_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HnapayUnbindBankCardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HnapayUnbindBankCardReq) ProtoMessage() {}

func (x *HnapayUnbindBankCardReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HnapayUnbindBankCardReq.ProtoReflect.Descriptor instead.
func (*HnapayUnbindBankCardReq) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{39}
}

func (x *HnapayUnbindBankCardReq) GetBizCode() string {
	if x != nil {
		return x.BizCode
	}
	return ""
}

func (x *HnapayUnbindBankCardReq) GetPmCode() string {
	if x != nil {
		return x.PmCode
	}
	return ""
}

func (x *HnapayUnbindBankCardReq) GetBindCardAgrNo() string {
	if x != nil {
		return x.BindCardAgrNo
	}
	return ""
}

// 新生个人用户解绑银行卡响应
type HnapayUnbindBankCardResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HnapayUnbindBankCardResp) Reset() {
	*x = HnapayUnbindBankCardResp{}
	mi := &file_chess_trade_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HnapayUnbindBankCardResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HnapayUnbindBankCardResp) ProtoMessage() {}

func (x *HnapayUnbindBankCardResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HnapayUnbindBankCardResp.ProtoReflect.Descriptor instead.
func (*HnapayUnbindBankCardResp) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{40}
}

func (x *HnapayUnbindBankCardResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *HnapayUnbindBankCardResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 新生快捷支付请求
type HnapayQuickPayOrderReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 业务编码
	BizCode string `protobuf:"bytes,1,opt,name=biz_code,json=bizCode,proto3" json:"biz_code,omitempty"`
	// 支付编码
	PmCode string `protobuf:"bytes,2,opt,name=pm_code,json=pmCode,proto3" json:"pm_code,omitempty"`
	// 绑卡协议号
	BindCardAgrNo string `protobuf:"bytes,3,opt,name=bind_card_agr_no,json=bindCardAgrNo,proto3" json:"bind_card_agr_no,omitempty"`
	// 支付金额 单位：分
	Amount uint32 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	// 收款账户：空 = 团队账户
	ReceiveUserAccount string `protobuf:"bytes,5,opt,name=receive_user_account,json=receiveUserAccount,proto3" json:"receive_user_account,omitempty"`
	// 业务订单号
	OrderId string `protobuf:"bytes,6,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// 业务回调地址 哪个服务下的具体回调方法：/new_chess.RightsServer/withdraw
	NotifyUrl string `protobuf:"bytes,7,opt,name=notify_url,json=notifyUrl,proto3" json:"notify_url,omitempty"`
	// 订单描述
	Description   string `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HnapayQuickPayOrderReq) Reset() {
	*x = HnapayQuickPayOrderReq{}
	mi := &file_chess_trade_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HnapayQuickPayOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HnapayQuickPayOrderReq) ProtoMessage() {}

func (x *HnapayQuickPayOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HnapayQuickPayOrderReq.ProtoReflect.Descriptor instead.
func (*HnapayQuickPayOrderReq) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{41}
}

func (x *HnapayQuickPayOrderReq) GetBizCode() string {
	if x != nil {
		return x.BizCode
	}
	return ""
}

func (x *HnapayQuickPayOrderReq) GetPmCode() string {
	if x != nil {
		return x.PmCode
	}
	return ""
}

func (x *HnapayQuickPayOrderReq) GetBindCardAgrNo() string {
	if x != nil {
		return x.BindCardAgrNo
	}
	return ""
}

func (x *HnapayQuickPayOrderReq) GetAmount() uint32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *HnapayQuickPayOrderReq) GetReceiveUserAccount() string {
	if x != nil {
		return x.ReceiveUserAccount
	}
	return ""
}

func (x *HnapayQuickPayOrderReq) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *HnapayQuickPayOrderReq) GetNotifyUrl() string {
	if x != nil {
		return x.NotifyUrl
	}
	return ""
}

func (x *HnapayQuickPayOrderReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type HnapayQuickPayOrderData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 平台订单号
	NcountOrderId string `protobuf:"bytes,1,opt,name=ncount_order_id,json=ncountOrderId,proto3" json:"ncount_order_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HnapayQuickPayOrderData) Reset() {
	*x = HnapayQuickPayOrderData{}
	mi := &file_chess_trade_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HnapayQuickPayOrderData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HnapayQuickPayOrderData) ProtoMessage() {}

func (x *HnapayQuickPayOrderData) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HnapayQuickPayOrderData.ProtoReflect.Descriptor instead.
func (*HnapayQuickPayOrderData) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{42}
}

func (x *HnapayQuickPayOrderData) GetNcountOrderId() string {
	if x != nil {
		return x.NcountOrderId
	}
	return ""
}

// 新生快捷支付响应
type HnapayQuickPayOrderResp struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Code          int32                    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	Data          *HnapayQuickPayOrderData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HnapayQuickPayOrderResp) Reset() {
	*x = HnapayQuickPayOrderResp{}
	mi := &file_chess_trade_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HnapayQuickPayOrderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HnapayQuickPayOrderResp) ProtoMessage() {}

func (x *HnapayQuickPayOrderResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HnapayQuickPayOrderResp.ProtoReflect.Descriptor instead.
func (*HnapayQuickPayOrderResp) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{43}
}

func (x *HnapayQuickPayOrderResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *HnapayQuickPayOrderResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *HnapayQuickPayOrderResp) GetData() *HnapayQuickPayOrderData {
	if x != nil {
		return x.Data
	}
	return nil
}

// 新生快捷支付确认请求
type HnapayQuickPayConfirmReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 业务编码
	BizCode string `protobuf:"bytes,1,opt,name=biz_code,json=bizCode,proto3" json:"biz_code,omitempty"`
	// 支付编码
	PmCode string `protobuf:"bytes,2,opt,name=pm_code,json=pmCode,proto3" json:"pm_code,omitempty"`
	// 平台订单号
	NcountOrderId string `protobuf:"bytes,3,opt,name=ncount_order_id,json=ncountOrderId,proto3" json:"ncount_order_id,omitempty"`
	// 签约短信验证码
	SmsCode string `protobuf:"bytes,4,opt,name=sms_code,json=smsCode,proto3" json:"sms_code,omitempty"`
	// ip需上传真实服务器ip，获取不到的值可空
	ClientIp      string `protobuf:"bytes,5,opt,name=client_ip,json=clientIp,proto3" json:"client_ip,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HnapayQuickPayConfirmReq) Reset() {
	*x = HnapayQuickPayConfirmReq{}
	mi := &file_chess_trade_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HnapayQuickPayConfirmReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HnapayQuickPayConfirmReq) ProtoMessage() {}

func (x *HnapayQuickPayConfirmReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HnapayQuickPayConfirmReq.ProtoReflect.Descriptor instead.
func (*HnapayQuickPayConfirmReq) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{44}
}

func (x *HnapayQuickPayConfirmReq) GetBizCode() string {
	if x != nil {
		return x.BizCode
	}
	return ""
}

func (x *HnapayQuickPayConfirmReq) GetPmCode() string {
	if x != nil {
		return x.PmCode
	}
	return ""
}

func (x *HnapayQuickPayConfirmReq) GetNcountOrderId() string {
	if x != nil {
		return x.NcountOrderId
	}
	return ""
}

func (x *HnapayQuickPayConfirmReq) GetSmsCode() string {
	if x != nil {
		return x.SmsCode
	}
	return ""
}

func (x *HnapayQuickPayConfirmReq) GetClientIp() string {
	if x != nil {
		return x.ClientIp
	}
	return ""
}

// 新生快捷支付确认响应
type HnapayQuickPayConfirmResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HnapayQuickPayConfirmResp) Reset() {
	*x = HnapayQuickPayConfirmResp{}
	mi := &file_chess_trade_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HnapayQuickPayConfirmResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HnapayQuickPayConfirmResp) ProtoMessage() {}

func (x *HnapayQuickPayConfirmResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HnapayQuickPayConfirmResp.ProtoReflect.Descriptor instead.
func (*HnapayQuickPayConfirmResp) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{45}
}

func (x *HnapayQuickPayConfirmResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *HnapayQuickPayConfirmResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 新生转账请求
type HnapayTransferReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 业务编码
	BizCode string `protobuf:"bytes,1,opt,name=biz_code,json=bizCode,proto3" json:"biz_code,omitempty"`
	// 支付编码
	PmCode string `protobuf:"bytes,2,opt,name=pm_code,json=pmCode,proto3" json:"pm_code,omitempty"`
	// 付款方系统用户ID
	PayUserId uint64 `protobuf:"varint,3,opt,name=pay_user_id,json=payUserId,proto3" json:"pay_user_id,omitempty"`
	// 收款方系统用户ID
	ReceiveUserId uint64 `protobuf:"varint,4,opt,name=receive_user_id,json=receiveUserId,proto3" json:"receive_user_id,omitempty"`
	// 付款方账户，不传默认是团队账户
	PayUserAccount string `protobuf:"bytes,5,opt,name=pay_user_account,json=payUserAccount,proto3" json:"pay_user_account,omitempty"`
	// 收款方账户，不传默认是团队账户
	ReceiveUserAccount string `protobuf:"bytes,6,opt,name=receive_user_account,json=receiveUserAccount,proto3" json:"receive_user_account,omitempty"`
	// 转账金额 单位：分
	Amount        uint32 `protobuf:"varint,7,opt,name=amount,proto3" json:"amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HnapayTransferReq) Reset() {
	*x = HnapayTransferReq{}
	mi := &file_chess_trade_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HnapayTransferReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HnapayTransferReq) ProtoMessage() {}

func (x *HnapayTransferReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HnapayTransferReq.ProtoReflect.Descriptor instead.
func (*HnapayTransferReq) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{46}
}

func (x *HnapayTransferReq) GetBizCode() string {
	if x != nil {
		return x.BizCode
	}
	return ""
}

func (x *HnapayTransferReq) GetPmCode() string {
	if x != nil {
		return x.PmCode
	}
	return ""
}

func (x *HnapayTransferReq) GetPayUserId() uint64 {
	if x != nil {
		return x.PayUserId
	}
	return 0
}

func (x *HnapayTransferReq) GetReceiveUserId() uint64 {
	if x != nil {
		return x.ReceiveUserId
	}
	return 0
}

func (x *HnapayTransferReq) GetPayUserAccount() string {
	if x != nil {
		return x.PayUserAccount
	}
	return ""
}

func (x *HnapayTransferReq) GetReceiveUserAccount() string {
	if x != nil {
		return x.ReceiveUserAccount
	}
	return ""
}

func (x *HnapayTransferReq) GetAmount() uint32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type HnapayTransferData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 付款方账户余额: 元
	PayAcctAmount string `protobuf:"bytes,1,opt,name=pay_acct_amount,json=payAcctAmount,proto3" json:"pay_acct_amount,omitempty"`
	// 收款方账户余额
	RecvAcctAmount string `protobuf:"bytes,2,opt,name=recv_acct_amount,json=recvAcctAmount,proto3" json:"recv_acct_amount,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *HnapayTransferData) Reset() {
	*x = HnapayTransferData{}
	mi := &file_chess_trade_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HnapayTransferData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HnapayTransferData) ProtoMessage() {}

func (x *HnapayTransferData) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HnapayTransferData.ProtoReflect.Descriptor instead.
func (*HnapayTransferData) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{47}
}

func (x *HnapayTransferData) GetPayAcctAmount() string {
	if x != nil {
		return x.PayAcctAmount
	}
	return ""
}

func (x *HnapayTransferData) GetRecvAcctAmount() string {
	if x != nil {
		return x.RecvAcctAmount
	}
	return ""
}

// 新生转账响应
type HnapayTransferResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	Data          *HnapayTransferData    `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HnapayTransferResp) Reset() {
	*x = HnapayTransferResp{}
	mi := &file_chess_trade_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HnapayTransferResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HnapayTransferResp) ProtoMessage() {}

func (x *HnapayTransferResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HnapayTransferResp.ProtoReflect.Descriptor instead.
func (*HnapayTransferResp) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{48}
}

func (x *HnapayTransferResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *HnapayTransferResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *HnapayTransferResp) GetData() *HnapayTransferData {
	if x != nil {
		return x.Data
	}
	return nil
}

// 新生账户提现请求
type HnapayWithdrawReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 业务编码
	BizCode string `protobuf:"bytes,1,opt,name=biz_code,json=bizCode,proto3" json:"biz_code,omitempty"`
	// 支付编码: 对应支付配置表payments P1006、新生支付下的兴动竞技商户
	PmCode string `protobuf:"bytes,2,opt,name=pm_code,json=pmCode,proto3" json:"pm_code,omitempty"`
	// 订单号
	OrderId string `protobuf:"bytes,3,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// 绑卡协议号
	BindCardAgrNo string `protobuf:"bytes,4,opt,name=bind_card_agr_no,json=bindCardAgrNo,proto3" json:"bind_card_agr_no,omitempty"`
	// 提现金额 单位：分
	Amount uint32 `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty"`
	// 支付密码(md5加密后传输)
	PaymentPassword string `protobuf:"bytes,6,opt,name=payment_password,json=paymentPassword,proto3" json:"payment_password,omitempty"`
	// 业务回调地址 哪个服务下的具体回调方法：/new_chess.RightsServer/withdraw
	NotifyUrl string `protobuf:"bytes,7,opt,name=notify_url,json=notifyUrl,proto3" json:"notify_url,omitempty"`
	// 订单描述
	Description string `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	// ip需上传真实服务器ip，获取不到的值可空
	ClientIp      string `protobuf:"bytes,9,opt,name=client_ip,json=clientIp,proto3" json:"client_ip,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HnapayWithdrawReq) Reset() {
	*x = HnapayWithdrawReq{}
	mi := &file_chess_trade_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HnapayWithdrawReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HnapayWithdrawReq) ProtoMessage() {}

func (x *HnapayWithdrawReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HnapayWithdrawReq.ProtoReflect.Descriptor instead.
func (*HnapayWithdrawReq) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{49}
}

func (x *HnapayWithdrawReq) GetBizCode() string {
	if x != nil {
		return x.BizCode
	}
	return ""
}

func (x *HnapayWithdrawReq) GetPmCode() string {
	if x != nil {
		return x.PmCode
	}
	return ""
}

func (x *HnapayWithdrawReq) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *HnapayWithdrawReq) GetBindCardAgrNo() string {
	if x != nil {
		return x.BindCardAgrNo
	}
	return ""
}

func (x *HnapayWithdrawReq) GetAmount() uint32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *HnapayWithdrawReq) GetPaymentPassword() string {
	if x != nil {
		return x.PaymentPassword
	}
	return ""
}

func (x *HnapayWithdrawReq) GetNotifyUrl() string {
	if x != nil {
		return x.NotifyUrl
	}
	return ""
}

func (x *HnapayWithdrawReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *HnapayWithdrawReq) GetClientIp() string {
	if x != nil {
		return x.ClientIp
	}
	return ""
}

type HnapayWithdrawData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NcountOrderId string                 `protobuf:"bytes,1,opt,name=ncount_order_id,json=ncountOrderId,proto3" json:"ncount_order_id,omitempty"` // 平台订单号
	OrderDate     string                 `protobuf:"bytes,2,opt,name=order_date,json=orderDate,proto3" json:"order_date,omitempty"`               // 平台订单日期 YYYYMMDD
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HnapayWithdrawData) Reset() {
	*x = HnapayWithdrawData{}
	mi := &file_chess_trade_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HnapayWithdrawData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HnapayWithdrawData) ProtoMessage() {}

func (x *HnapayWithdrawData) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HnapayWithdrawData.ProtoReflect.Descriptor instead.
func (*HnapayWithdrawData) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{50}
}

func (x *HnapayWithdrawData) GetNcountOrderId() string {
	if x != nil {
		return x.NcountOrderId
	}
	return ""
}

func (x *HnapayWithdrawData) GetOrderDate() string {
	if x != nil {
		return x.OrderDate
	}
	return ""
}

type HnapayWithdrawResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	Data          *HnapayWithdrawData    `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HnapayWithdrawResp) Reset() {
	*x = HnapayWithdrawResp{}
	mi := &file_chess_trade_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HnapayWithdrawResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HnapayWithdrawResp) ProtoMessage() {}

func (x *HnapayWithdrawResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HnapayWithdrawResp.ProtoReflect.Descriptor instead.
func (*HnapayWithdrawResp) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{51}
}

func (x *HnapayWithdrawResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *HnapayWithdrawResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *HnapayWithdrawResp) GetData() *HnapayWithdrawData {
	if x != nil {
		return x.Data
	}
	return nil
}

type NcountAccount struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	MainAccountId   string                 `protobuf:"bytes,1,opt,name=main_account_id,json=mainAccountId,proto3" json:"main_account_id,omitempty"`
	PacketAccountId string                 `protobuf:"bytes,2,opt,name=packet_account_id,json=packetAccountId,proto3" json:"packet_account_id,omitempty"`
	Mobile          string                 `protobuf:"bytes,3,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Realname        string                 `protobuf:"bytes,4,opt,name=realname,proto3" json:"realname,omitempty"`
	IdCard          string                 `protobuf:"bytes,5,opt,name=id_card,json=idCard,proto3" json:"id_card,omitempty"`
	PaymentPassword string                 `protobuf:"bytes,6,opt,name=payment_password,json=paymentPassword,proto3" json:"payment_password,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *NcountAccount) Reset() {
	*x = NcountAccount{}
	mi := &file_chess_trade_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NcountAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NcountAccount) ProtoMessage() {}

func (x *NcountAccount) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NcountAccount.ProtoReflect.Descriptor instead.
func (*NcountAccount) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{52}
}

func (x *NcountAccount) GetMainAccountId() string {
	if x != nil {
		return x.MainAccountId
	}
	return ""
}

func (x *NcountAccount) GetPacketAccountId() string {
	if x != nil {
		return x.PacketAccountId
	}
	return ""
}

func (x *NcountAccount) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *NcountAccount) GetRealname() string {
	if x != nil {
		return x.Realname
	}
	return ""
}

func (x *NcountAccount) GetIdCard() string {
	if x != nil {
		return x.IdCard
	}
	return ""
}

func (x *NcountAccount) GetPaymentPassword() string {
	if x != nil {
		return x.PaymentPassword
	}
	return ""
}

type NcountBankCard struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	BindCardAgrNo     string                 `protobuf:"bytes,1,opt,name=bind_card_agr_no,json=bindCardAgrNo,proto3" json:"bind_card_agr_no,omitempty"`
	Mobile            string                 `protobuf:"bytes,2,opt,name=mobile,proto3" json:"mobile,omitempty"`
	HolderName        string                 `protobuf:"bytes,3,opt,name=holder_name,json=holderName,proto3" json:"holder_name,omitempty"`
	BankCardNo        string                 `protobuf:"bytes,4,opt,name=bank_card_no,json=bankCardNo,proto3" json:"bank_card_no,omitempty"`
	CardAvailableDate string                 `protobuf:"bytes,5,opt,name=card_available_date,json=cardAvailableDate,proto3" json:"card_available_date,omitempty"`
	IdCard            string                 `protobuf:"bytes,6,opt,name=id_card,json=idCard,proto3" json:"id_card,omitempty"`
	Cvv2              string                 `protobuf:"bytes,7,opt,name=cvv2,proto3" json:"cvv2,omitempty"`
	BankCode          string                 `protobuf:"bytes,8,opt,name=bank_code,json=bankCode,proto3" json:"bank_code,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *NcountBankCard) Reset() {
	*x = NcountBankCard{}
	mi := &file_chess_trade_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NcountBankCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NcountBankCard) ProtoMessage() {}

func (x *NcountBankCard) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NcountBankCard.ProtoReflect.Descriptor instead.
func (*NcountBankCard) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{53}
}

func (x *NcountBankCard) GetBindCardAgrNo() string {
	if x != nil {
		return x.BindCardAgrNo
	}
	return ""
}

func (x *NcountBankCard) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *NcountBankCard) GetHolderName() string {
	if x != nil {
		return x.HolderName
	}
	return ""
}

func (x *NcountBankCard) GetBankCardNo() string {
	if x != nil {
		return x.BankCardNo
	}
	return ""
}

func (x *NcountBankCard) GetCardAvailableDate() string {
	if x != nil {
		return x.CardAvailableDate
	}
	return ""
}

func (x *NcountBankCard) GetIdCard() string {
	if x != nil {
		return x.IdCard
	}
	return ""
}

func (x *NcountBankCard) GetCvv2() string {
	if x != nil {
		return x.Cvv2
	}
	return ""
}

func (x *NcountBankCard) GetBankCode() string {
	if x != nil {
		return x.BankCode
	}
	return ""
}

// 获取用户账户信息请求
type HnapayCheckUserAccountInfoReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// token获取用户ID
	// 业务编码
	BizCode string `protobuf:"bytes,1,opt,name=biz_code,json=bizCode,proto3" json:"biz_code,omitempty"`
	// 支付编码: 对应支付配置表payments P1006、新生支付下的兴动竞技商户
	PmCode string `protobuf:"bytes,2,opt,name=pm_code,json=pmCode,proto3" json:"pm_code,omitempty"`
	// 账户信息
	NcountAccount *NcountAccount `protobuf:"bytes,3,opt,name=ncount_account,json=ncountAccount,proto3" json:"ncount_account,omitempty"`
	// 账户银行卡信息
	NcountBankCard []*NcountBankCard `protobuf:"bytes,4,rep,name=ncount_bank_card,json=ncountBankCard,proto3" json:"ncount_bank_card,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *HnapayCheckUserAccountInfoReq) Reset() {
	*x = HnapayCheckUserAccountInfoReq{}
	mi := &file_chess_trade_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HnapayCheckUserAccountInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HnapayCheckUserAccountInfoReq) ProtoMessage() {}

func (x *HnapayCheckUserAccountInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HnapayCheckUserAccountInfoReq.ProtoReflect.Descriptor instead.
func (*HnapayCheckUserAccountInfoReq) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{54}
}

func (x *HnapayCheckUserAccountInfoReq) GetBizCode() string {
	if x != nil {
		return x.BizCode
	}
	return ""
}

func (x *HnapayCheckUserAccountInfoReq) GetPmCode() string {
	if x != nil {
		return x.PmCode
	}
	return ""
}

func (x *HnapayCheckUserAccountInfoReq) GetNcountAccount() *NcountAccount {
	if x != nil {
		return x.NcountAccount
	}
	return nil
}

func (x *HnapayCheckUserAccountInfoReq) GetNcountBankCard() []*NcountBankCard {
	if x != nil {
		return x.NcountBankCard
	}
	return nil
}

type HnapayCheckUserAccountInfoData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// userId	用户编号
	// outUserId	用户标识		开户时商户上送的用户标识
	// userStat 用户状态 2 00：正常 01：待激活 02：锁定 03：开户失败 99：注销
	// auditStat 审核状态 2 00：审核通过 01：待审核 02：审核不通过 03：无需审核
	// authStat 实名状态 2 00：实名认证成功 01：待认证 02：实名认证失败 03：无需实名认证 04：认证超时
	// balAmount 帐户余额 格式：数字，单位：元
	// unclearAmount 待 清 算 余 额 格式：数字，单位：元
	// unclearSumAmount 待 清 算 余 额汇总 格式：数字，单位：元；平 台用户时出现
	// availableBalance 可用余额 格式：数字，单位：元
	// unsettleBalance 待 结 转 余 额 格式：数字，单位：元
	// bindCardAgrNoLi st 绑 卡 协 议 号列表 例 如 ： ["20180822000000 0123","2018082200 00000118"]
	UserId            string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	OutUserId         string `protobuf:"bytes,2,opt,name=out_user_id,json=outUserId,proto3" json:"out_user_id,omitempty"`
	UserStat          string `protobuf:"bytes,3,opt,name=user_stat,json=userStat,proto3" json:"user_stat,omitempty"`
	AuditStat         string `protobuf:"bytes,4,opt,name=audit_stat,json=auditStat,proto3" json:"audit_stat,omitempty"`
	AuthStat          string `protobuf:"bytes,5,opt,name=auth_stat,json=authStat,proto3" json:"auth_stat,omitempty"`
	BalAmount         string `protobuf:"bytes,6,opt,name=bal_amount,json=balAmount,proto3" json:"bal_amount,omitempty"`
	UnclearAmount     string `protobuf:"bytes,7,opt,name=unclear_amount,json=unclearAmount,proto3" json:"unclear_amount,omitempty"`
	UnclearSumAmount  string `protobuf:"bytes,8,opt,name=unclear_sum_amount,json=unclearSumAmount,proto3" json:"unclear_sum_amount,omitempty"`
	AvailableBalance  string `protobuf:"bytes,9,opt,name=available_balance,json=availableBalance,proto3" json:"available_balance,omitempty"`
	UnsettleBalance   string `protobuf:"bytes,10,opt,name=unsettle_balance,json=unsettleBalance,proto3" json:"unsettle_balance,omitempty"`
	BindCardAgrNoList string `protobuf:"bytes,11,opt,name=bind_card_agr_no_list,json=bindCardAgrNoList,proto3" json:"bind_card_agr_no_list,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *HnapayCheckUserAccountInfoData) Reset() {
	*x = HnapayCheckUserAccountInfoData{}
	mi := &file_chess_trade_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HnapayCheckUserAccountInfoData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HnapayCheckUserAccountInfoData) ProtoMessage() {}

func (x *HnapayCheckUserAccountInfoData) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HnapayCheckUserAccountInfoData.ProtoReflect.Descriptor instead.
func (*HnapayCheckUserAccountInfoData) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{55}
}

func (x *HnapayCheckUserAccountInfoData) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *HnapayCheckUserAccountInfoData) GetOutUserId() string {
	if x != nil {
		return x.OutUserId
	}
	return ""
}

func (x *HnapayCheckUserAccountInfoData) GetUserStat() string {
	if x != nil {
		return x.UserStat
	}
	return ""
}

func (x *HnapayCheckUserAccountInfoData) GetAuditStat() string {
	if x != nil {
		return x.AuditStat
	}
	return ""
}

func (x *HnapayCheckUserAccountInfoData) GetAuthStat() string {
	if x != nil {
		return x.AuthStat
	}
	return ""
}

func (x *HnapayCheckUserAccountInfoData) GetBalAmount() string {
	if x != nil {
		return x.BalAmount
	}
	return ""
}

func (x *HnapayCheckUserAccountInfoData) GetUnclearAmount() string {
	if x != nil {
		return x.UnclearAmount
	}
	return ""
}

func (x *HnapayCheckUserAccountInfoData) GetUnclearSumAmount() string {
	if x != nil {
		return x.UnclearSumAmount
	}
	return ""
}

func (x *HnapayCheckUserAccountInfoData) GetAvailableBalance() string {
	if x != nil {
		return x.AvailableBalance
	}
	return ""
}

func (x *HnapayCheckUserAccountInfoData) GetUnsettleBalance() string {
	if x != nil {
		return x.UnsettleBalance
	}
	return ""
}

func (x *HnapayCheckUserAccountInfoData) GetBindCardAgrNoList() string {
	if x != nil {
		return x.BindCardAgrNoList
	}
	return ""
}

type HnapayCheckUserAccountInfoResp struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	Code          int32                           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                          `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	Data          *HnapayCheckUserAccountInfoData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HnapayCheckUserAccountInfoResp) Reset() {
	*x = HnapayCheckUserAccountInfoResp{}
	mi := &file_chess_trade_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HnapayCheckUserAccountInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HnapayCheckUserAccountInfoResp) ProtoMessage() {}

func (x *HnapayCheckUserAccountInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HnapayCheckUserAccountInfoResp.ProtoReflect.Descriptor instead.
func (*HnapayCheckUserAccountInfoResp) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{56}
}

func (x *HnapayCheckUserAccountInfoResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *HnapayCheckUserAccountInfoResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *HnapayCheckUserAccountInfoResp) GetData() *HnapayCheckUserAccountInfoData {
	if x != nil {
		return x.Data
	}
	return nil
}

// 获取系统账户信息
type GetNcountAccountInfoReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 业务编码
	BizCode       string `protobuf:"bytes,1,opt,name=biz_code,json=bizCode,proto3" json:"biz_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNcountAccountInfoReq) Reset() {
	*x = GetNcountAccountInfoReq{}
	mi := &file_chess_trade_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNcountAccountInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNcountAccountInfoReq) ProtoMessage() {}

func (x *GetNcountAccountInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNcountAccountInfoReq.ProtoReflect.Descriptor instead.
func (*GetNcountAccountInfoReq) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{57}
}

func (x *GetNcountAccountInfoReq) GetBizCode() string {
	if x != nil {
		return x.BizCode
	}
	return ""
}

type NcountAccountInfoData struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	UserId          uint64                 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                             // 用户ID
	MainAccountId   string                 `protobuf:"bytes,2,opt,name=main_account_id,json=mainAccountId,proto3" json:"main_account_id,omitempty"`       // 主账户
	PacketAccountId string                 `protobuf:"bytes,3,opt,name=packet_account_id,json=packetAccountId,proto3" json:"packet_account_id,omitempty"` // 红包账户
	Mobile          string                 `protobuf:"bytes,4,opt,name=mobile,proto3" json:"mobile,omitempty"`                                            // 手机号
	Realname        string                 `protobuf:"bytes,5,opt,name=realname,proto3" json:"realname,omitempty"`                                        // 姓名
	IdCard          string                 `protobuf:"bytes,6,opt,name=id_card,json=idCard,proto3" json:"id_card,omitempty"`                              // 身份证号
	PaymentPassword string                 `protobuf:"bytes,7,opt,name=payment_password,json=paymentPassword,proto3" json:"payment_password,omitempty"`   // 支付密码
	OpenStatus      uint32                 `protobuf:"varint,8,opt,name=open_status,json=openStatus,proto3" json:"open_status,omitempty"`                 // 开通状态：1、正常
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *NcountAccountInfoData) Reset() {
	*x = NcountAccountInfoData{}
	mi := &file_chess_trade_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NcountAccountInfoData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NcountAccountInfoData) ProtoMessage() {}

func (x *NcountAccountInfoData) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NcountAccountInfoData.ProtoReflect.Descriptor instead.
func (*NcountAccountInfoData) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{58}
}

func (x *NcountAccountInfoData) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *NcountAccountInfoData) GetMainAccountId() string {
	if x != nil {
		return x.MainAccountId
	}
	return ""
}

func (x *NcountAccountInfoData) GetPacketAccountId() string {
	if x != nil {
		return x.PacketAccountId
	}
	return ""
}

func (x *NcountAccountInfoData) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *NcountAccountInfoData) GetRealname() string {
	if x != nil {
		return x.Realname
	}
	return ""
}

func (x *NcountAccountInfoData) GetIdCard() string {
	if x != nil {
		return x.IdCard
	}
	return ""
}

func (x *NcountAccountInfoData) GetPaymentPassword() string {
	if x != nil {
		return x.PaymentPassword
	}
	return ""
}

func (x *NcountAccountInfoData) GetOpenStatus() uint32 {
	if x != nil {
		return x.OpenStatus
	}
	return 0
}

type GetNcountAccountInfoResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	Data          *NcountAccountInfoData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNcountAccountInfoResp) Reset() {
	*x = GetNcountAccountInfoResp{}
	mi := &file_chess_trade_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNcountAccountInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNcountAccountInfoResp) ProtoMessage() {}

func (x *GetNcountAccountInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNcountAccountInfoResp.ProtoReflect.Descriptor instead.
func (*GetNcountAccountInfoResp) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{59}
}

func (x *GetNcountAccountInfoResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetNcountAccountInfoResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetNcountAccountInfoResp) GetData() *NcountAccountInfoData {
	if x != nil {
		return x.Data
	}
	return nil
}

// 设置支付密码
type SetPaymentSecretReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 业务编码
	BizCode string `protobuf:"bytes,1,opt,name=biz_code,json=bizCode,proto3" json:"biz_code,omitempty"`
	// 支付密码
	PaymentPassword string `protobuf:"bytes,2,opt,name=payment_password,json=paymentPassword,proto3" json:"payment_password,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SetPaymentSecretReq) Reset() {
	*x = SetPaymentSecretReq{}
	mi := &file_chess_trade_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetPaymentSecretReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPaymentSecretReq) ProtoMessage() {}

func (x *SetPaymentSecretReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPaymentSecretReq.ProtoReflect.Descriptor instead.
func (*SetPaymentSecretReq) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{60}
}

func (x *SetPaymentSecretReq) GetBizCode() string {
	if x != nil {
		return x.BizCode
	}
	return ""
}

func (x *SetPaymentSecretReq) GetPaymentPassword() string {
	if x != nil {
		return x.PaymentPassword
	}
	return ""
}

type SetPaymentSecretResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetPaymentSecretResp) Reset() {
	*x = SetPaymentSecretResp{}
	mi := &file_chess_trade_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetPaymentSecretResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPaymentSecretResp) ProtoMessage() {}

func (x *SetPaymentSecretResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_trade_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPaymentSecretResp.ProtoReflect.Descriptor instead.
func (*SetPaymentSecretResp) Descriptor() ([]byte, []int) {
	return file_chess_trade_proto_rawDescGZIP(), []int{61}
}

func (x *SetPaymentSecretResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SetPaymentSecretResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

var File_chess_trade_proto protoreflect.FileDescriptor

var file_chess_trade_proto_rawDesc = []byte{
	0x0a, 0x11, 0x63, 0x68, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x1a, 0x1b,
	0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe1, 0x02, 0x0a, 0x0a,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x08, 0x62, 0x69,
	0x7a, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a,
	0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x25, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x09, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x2d, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x64, 0x65, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1f, 0x0a, 0x07, 0x70, 0x6d, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x06, 0x70, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x22,
	0x71, 0x0a, 0x0d, 0x48, 0x35, 0x50, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64, 0x55,
	0x72, 0x6c, 0x22, 0xf4, 0x01, 0x0a, 0x10, 0x4a, 0x73, 0x61, 0x70, 0x69, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x72, 0x65, 0x70, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x72, 0x65, 0x70, 0x61, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70,
	0x70, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x73, 0x74, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x73, 0x74, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x0d, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x08, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0x92, 0x02, 0x0a,
	0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x69, 0x7a, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x70, 0x6d, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x74, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x22, 0x6b, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x33, 0x0a, 0x0a, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x33,
	0x0a, 0x0e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x12, 0x21, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x0f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xa5, 0x01, 0x0a,
	0x0e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12,
	0x21, 0x0a, 0x08, 0x62, 0x69, 0x7a, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x21, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x37, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x89, 0x02,
	0x0a, 0x0e, 0x41, 0x70, 0x70, 0x50, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x70, 0x61, 0x79,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x65, 0x70, 0x61, 0x79,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x67, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x22, 0x93, 0x03, 0x0a, 0x13, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x12, 0x2d, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x12, 0x1f, 0x0a, 0x07, 0x70, 0x6d, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x70, 0x6d, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x21, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x10, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x61, 0x67, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0d, 0x62, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x72,
	0x64, 0x41, 0x67, 0x72, 0x4e, 0x6f, 0x12, 0x1e, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x25, 0x0a, 0x0a, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x72, 0x6c,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x70, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x22,
	0x3c, 0x0a, 0x14, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x42, 0x61, 0x6e, 0x6b, 0x43,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x39, 0x0a,
	0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x72, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x33, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65,
	0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xa2, 0x01, 0x0a,
	0x14, 0x53, 0x61, 0x76, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x6f, 0x64, 0x61, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x65,
	0x65, 0x22, 0x3d, 0x0a, 0x15, 0x53, 0x61, 0x76, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x22, 0xc4, 0x01, 0x0a, 0x18, 0x53, 0x61, 0x76, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x07,
	0xba, 0x48, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x64,
	0x61, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f,
	0x64, 0x61, 0x79, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74,
	0x6f, 0x64, 0x61, 0x79, 0x43, 0x6e, 0x74, 0x22, 0x41, 0x0a, 0x19, 0x53, 0x61, 0x76, 0x65, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x15, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x22, 0x71, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12,
	0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x3b, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12,
	0x20, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x07, 0xba, 0x48, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x79, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x61,
	0x76, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xbb, 0x01, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x29, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x0e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a,
	0x07, 0x65, 0x72, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xcc,
	0x01, 0x0a, 0x0f, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x6d, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x41, 0x6d, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x63, 0x65, 0x70, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2d,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e,
	0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x6a, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68,
	0x65, 0x73, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x19, 0x0a, 0x17, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x69, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x22, 0x4e, 0x0a, 0x18, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x65,
	0x72, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72,
	0x72, 0x4d, 0x73, 0x67, 0x22, 0x79, 0x0a, 0x18, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x52, 0x69, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x92, 0x02, 0x0a, 0x17, 0x48, 0x6e, 0x61, 0x70, 0x61, 0x79, 0x4e, 0x65, 0x77, 0x53, 0x65, 0x6c,
	0x66, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x08, 0x62,
	0x69, 0x7a, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f,
	0x0a, 0x07, 0x70, 0x6d, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x70, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x26, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x09, 0x6d, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x07, 0x69,
	0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x26, 0x0a, 0x0f,
	0x69, 0x73, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x4d, 0x61, 0x69, 0x6e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x33, 0x0a, 0x18, 0x48, 0x6e, 0x61, 0x70, 0x61, 0x79, 0x4e, 0x65,
	0x77, 0x53, 0x65, 0x6c, 0x66, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x79, 0x0a, 0x18, 0x48, 0x6e, 0x61,
	0x70, 0x61, 0x79, 0x4e, 0x65, 0x77, 0x53, 0x65, 0x6c, 0x66, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x37, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x65, 0x77, 0x5f,
	0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x48, 0x6e, 0x61, 0x70, 0x61, 0x79, 0x4e, 0x65, 0x77, 0x53,
	0x65, 0x6c, 0x66, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x89, 0x02, 0x0a, 0x15, 0x48, 0x6e, 0x61, 0x70, 0x61, 0x79, 0x42,
	0x69, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x21,
	0x0a, 0x08, 0x62, 0x69, 0x7a, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1f, 0x0a, 0x07, 0x70, 0x6d, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x70, 0x6d, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1f, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x63, 0x61, 0x72,
	0x64, 0x4e, 0x6f, 0x12, 0x27, 0x0a, 0x0b, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x0a, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x06,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x13,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x61, 0x72, 0x64, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x76, 0x76, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x76, 0x76, 0x32,
	0x22, 0x62, 0x0a, 0x16, 0x48, 0x6e, 0x61, 0x70, 0x61, 0x79, 0x42, 0x69, 0x6e, 0x64, 0x42, 0x61,
	0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x61,
	0x6e, 0x6b, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x62, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f,
	0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x75, 0x0a, 0x16, 0x48, 0x6e, 0x61, 0x70, 0x61, 0x79, 0x42, 0x69,
	0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x48,
	0x6e, 0x61, 0x70, 0x61, 0x79, 0x42, 0x69, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb5, 0x01, 0x0a, 0x1c,
	0x48, 0x6e, 0x61, 0x70, 0x61, 0x79, 0x42, 0x69, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x61,
	0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x08,
	0x62, 0x69, 0x7a, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1f, 0x0a, 0x07, 0x70, 0x6d, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x70, 0x6d, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x2e, 0x0a, 0x0f, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x0d, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x08, 0x73, 0x6d, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x73, 0x6d, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x1d, 0x48, 0x6e, 0x61, 0x70, 0x61, 0x79, 0x42, 0x69,
	0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x10, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x61, 0x67, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x62, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x41, 0x67, 0x72, 0x4e, 0x6f, 0x12, 0x1b,
	0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x22, 0x83, 0x01, 0x0a,
	0x1d, 0x48, 0x6e, 0x61, 0x70, 0x61, 0x79, 0x42, 0x69, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x43,
	0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x3c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x48,
	0x6e, 0x61, 0x70, 0x61, 0x79, 0x42, 0x69, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x8e, 0x01, 0x0a, 0x17, 0x48, 0x6e, 0x61, 0x70, 0x61, 0x79, 0x55, 0x6e, 0x62,
	0x69, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x21,
	0x0a, 0x08, 0x62, 0x69, 0x7a, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1f, 0x0a, 0x07, 0x70, 0x6d, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x70, 0x6d, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x2f, 0x0a, 0x10, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x61, 0x67, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x0d, 0x62, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x41, 0x67,
	0x72, 0x4e, 0x6f, 0x22, 0x40, 0x0a, 0x18, 0x48, 0x6e, 0x61, 0x70, 0x61, 0x79, 0x55, 0x6e, 0x62,
	0x69, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xc3, 0x02, 0x0a, 0x16, 0x48, 0x6e, 0x61, 0x70, 0x61, 0x79,
	0x51, 0x75, 0x69, 0x63, 0x6b, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x12, 0x21, 0x0a, 0x08, 0x62, 0x69, 0x7a, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x07, 0x70, 0x6d, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x70, 0x6d,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x10, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x61, 0x67, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0d, 0x62, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x41, 0x67, 0x72, 0x4e, 0x6f, 0x12, 0x1e, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x49, 0x0a, 0x17, 0x48,
	0x6e, 0x61, 0x70, 0x61, 0x79, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x0f, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0d, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x77, 0x0a, 0x17, 0x48, 0x6e, 0x61, 0x70, 0x61, 0x79,
	0x51, 0x75, 0x69, 0x63, 0x6b, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73,
	0x73, 0x2e, 0x48, 0x6e, 0x61, 0x70, 0x61, 0x79, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x50, 0x61, 0x79,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xce, 0x01, 0x0a, 0x18, 0x48, 0x6e, 0x61, 0x70, 0x61, 0x79, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x50,
	0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x08,
	0x62, 0x69, 0x7a, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1f, 0x0a, 0x07, 0x70, 0x6d, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x70, 0x6d, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x2e, 0x0a, 0x0f, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x0d, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x08, 0x73, 0x6d, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x73, 0x6d, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70,
	0x22, 0x41, 0x0a, 0x19, 0x48, 0x6e, 0x61, 0x70, 0x61, 0x79, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x50,
	0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x22, 0x9b, 0x02, 0x0a, 0x11, 0x48, 0x6e, 0x61, 0x70, 0x61, 0x79, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x08, 0x62, 0x69, 0x7a,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x07,
	0x70, 0x6d, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x70, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a,
	0x0b, 0x70, 0x61, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x70, 0x61, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x70, 0x61, 0x79, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x30, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1e, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x66, 0x0a, 0x12, 0x48, 0x6e, 0x61, 0x70, 0x61, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x5f, 0x61,
	0x63, 0x63, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x70, 0x61, 0x79, 0x41, 0x63, 0x63, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x76, 0x5f, 0x61, 0x63, 0x63, 0x74, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x76, 0x41,
	0x63, 0x63, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x6d, 0x0a, 0x12, 0x48, 0x6e, 0x61,
	0x70, 0x61, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e,
	0x48, 0x6e, 0x61, 0x70, 0x61, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xdc, 0x02, 0x0a, 0x11, 0x48, 0x6e, 0x61,
	0x70, 0x61, 0x79, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x12, 0x21,
	0x0a, 0x08, 0x62, 0x69, 0x7a, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1f, 0x0a, 0x07, 0x70, 0x6d, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x70, 0x6d, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x21, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x10, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x61, 0x67, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0d, 0x62, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x72,
	0x64, 0x41, 0x67, 0x72, 0x4e, 0x6f, 0x12, 0x1e, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x22, 0x5b, 0x0a, 0x12, 0x48, 0x6e, 0x61, 0x70, 0x61,
	0x79, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a,
	0x0f, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x65, 0x22, 0x6d, 0x0a, 0x12, 0x48, 0x6e, 0x61, 0x70, 0x61, 0x79, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x48, 0x6e, 0x61, 0x70, 0x61,
	0x79, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xdb, 0x01, 0x0a, 0x0d, 0x4e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6d, 0x61, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x11, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x22, 0x8e, 0x02, 0x0a, 0x0e, 0x4e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x6b,
	0x43, 0x61, 0x72, 0x64, 0x12, 0x27, 0x0a, 0x10, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x61, 0x67, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x62, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x41, 0x67, 0x72, 0x4e, 0x6f, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61,
	0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x61, 0x72, 0x64, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x64, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x64, 0x43, 0x61, 0x72,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x76, 0x76, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x76, 0x76, 0x32, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0xe9, 0x01, 0x0a, 0x1d, 0x48, 0x6e, 0x61, 0x70, 0x61, 0x79, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x08, 0x62, 0x69, 0x7a, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07,
	0x62, 0x69, 0x7a, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x07, 0x70, 0x6d, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x06, 0x70, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x6e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x4e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0d, 0x6e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x10, 0x6e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e,
	0x4e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x52, 0x0e,
	0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x22, 0xb0,
	0x03, 0x0a, 0x1e, 0x48, 0x6e, 0x61, 0x70, 0x61, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x6f, 0x75,
	0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6f, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x6e, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x6e, 0x63, 0x6c,
	0x65, 0x61, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x6e, 0x63,
	0x6c, 0x65, 0x61, 0x72, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x75, 0x6e, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x75,
	0x6d, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x75, 0x6e, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x30, 0x0a, 0x15, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x67, 0x72,
	0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x62, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x41, 0x67, 0x72, 0x4e, 0x6f, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x85, 0x01, 0x0a, 0x1e, 0x48, 0x6e, 0x61, 0x70, 0x61, 0x79, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x3d, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63,
	0x68, 0x65, 0x73, 0x73, 0x2e, 0x48, 0x6e, 0x61, 0x70, 0x61, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3c, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x4e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x08, 0x62, 0x69, 0x7a, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07,
	0x62, 0x69, 0x7a, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x9d, 0x02, 0x0a, 0x15, 0x4e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61,
	0x69, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6f, 0x70, 0x65,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x76, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68,
	0x65, 0x73, 0x73, 0x2e, 0x4e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x6b, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x08, 0x62, 0x69, 0x7a, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x07, 0x62, 0x69, 0x7a, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x10, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x3c, 0x0a, 0x14,
	0x53, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x32, 0xfd, 0x10, 0x0a, 0x05, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x68, 0x35, 0x50, 0x72, 0x65, 0x70, 0x61, 0x69,
	0x64, 0x12, 0x15, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x69, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63,
	0x68, 0x65, 0x73, 0x73, 0x2e, 0x48, 0x35, 0x50, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x3e, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x50, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64,
	0x12, 0x15, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x69, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68,
	0x65, 0x73, 0x73, 0x2e, 0x41, 0x70, 0x70, 0x50, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x42, 0x0a, 0x0c, 0x6a, 0x73, 0x61, 0x70, 0x69, 0x50, 0x72, 0x65, 0x70, 0x61,
	0x69, 0x64, 0x12, 0x15, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x69, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x6e, 0x65, 0x77, 0x5f,
	0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x4a, 0x73, 0x61, 0x70, 0x69, 0x50, 0x72, 0x65, 0x70, 0x61,
	0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x41, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x19,
	0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x44, 0x0a, 0x0b, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63,
	0x68, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x44, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x19,
	0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x6e, 0x65, 0x77, 0x5f,
	0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x53, 0x0a, 0x10, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1e, 0x2e, 0x6e, 0x65, 0x77, 0x5f,
	0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x42, 0x61,
	0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x6e, 0x65, 0x77, 0x5f,
	0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x42, 0x61,
	0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x56, 0x0a, 0x11, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x1f, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x1a, 0x20, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x56, 0x0a, 0x11, 0x73, 0x61, 0x76, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68,
	0x65, 0x73, 0x73, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63,
	0x68, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x53, 0x0a, 0x10, 0x67, 0x65,
	0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e,
	0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x1f,
	0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x62, 0x0a, 0x15, 0x73, 0x61, 0x76, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63,
	0x68, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e,
	0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x5f, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22, 0x2e, 0x6e, 0x65,
	0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x1a,
	0x23, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x4d, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x1c, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65,
	0x73, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x6f, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x5f, 0x0a, 0x14, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x22, 0x2e, 0x6e, 0x65,
	0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a,
	0x23, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x55, 0x73, 0x65, 0x72, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x69, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x5f, 0x0a, 0x14, 0x68, 0x6e, 0x61, 0x70, 0x61, 0x79, 0x4e, 0x65,
	0x77, 0x53, 0x65, 0x6c, 0x66, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x2e, 0x6e,
	0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x48, 0x6e, 0x61, 0x70, 0x61, 0x79, 0x4e,
	0x65, 0x77, 0x53, 0x65, 0x6c, 0x66, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x23, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x48, 0x6e, 0x61,
	0x70, 0x61, 0x79, 0x4e, 0x65, 0x77, 0x53, 0x65, 0x6c, 0x66, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x59, 0x0a, 0x12, 0x68, 0x6e, 0x61, 0x70, 0x61, 0x79, 0x42,
	0x69, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x12, 0x20, 0x2e, 0x6e, 0x65,
	0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x48, 0x6e, 0x61, 0x70, 0x61, 0x79, 0x42, 0x69,
	0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e,
	0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x48, 0x6e, 0x61, 0x70, 0x61, 0x79,
	0x42, 0x69, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x6e, 0x0a, 0x19, 0x68, 0x6e, 0x61, 0x70, 0x61, 0x79, 0x42, 0x69, 0x6e, 0x64, 0x42, 0x61,
	0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x27, 0x2e,
	0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x48, 0x6e, 0x61, 0x70, 0x61, 0x79,
	0x42, 0x69, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65,
	0x73, 0x73, 0x2e, 0x48, 0x6e, 0x61, 0x70, 0x61, 0x79, 0x42, 0x69, 0x6e, 0x64, 0x42, 0x61, 0x6e,
	0x6b, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x5f, 0x0a, 0x14, 0x68, 0x6e, 0x61, 0x70, 0x61, 0x79, 0x55, 0x6e, 0x62, 0x69, 0x6e, 0x64,
	0x42, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x12, 0x22, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63,
	0x68, 0x65, 0x73, 0x73, 0x2e, 0x48, 0x6e, 0x61, 0x70, 0x61, 0x79, 0x55, 0x6e, 0x62, 0x69, 0x6e,
	0x64, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x6e,
	0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x48, 0x6e, 0x61, 0x70, 0x61, 0x79, 0x55,
	0x6e, 0x62, 0x69, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x5c, 0x0a, 0x13, 0x68, 0x6e, 0x61, 0x70, 0x61, 0x79, 0x51, 0x75, 0x69, 0x63, 0x6b,
	0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63,
	0x68, 0x65, 0x73, 0x73, 0x2e, 0x48, 0x6e, 0x61, 0x70, 0x61, 0x79, 0x51, 0x75, 0x69, 0x63, 0x6b,
	0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x6e, 0x65,
	0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x48, 0x6e, 0x61, 0x70, 0x61, 0x79, 0x51, 0x75,
	0x69, 0x63, 0x6b, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x62, 0x0a, 0x15, 0x68, 0x6e, 0x61, 0x70, 0x61, 0x79, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x50, 0x61,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x23, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63,
	0x68, 0x65, 0x73, 0x73, 0x2e, 0x48, 0x6e, 0x61, 0x70, 0x61, 0x79, 0x51, 0x75, 0x69, 0x63, 0x6b,
	0x50, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e,
	0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x48, 0x6e, 0x61, 0x70, 0x61, 0x79,
	0x51, 0x75, 0x69, 0x63, 0x6b, 0x50, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x4d, 0x0a, 0x0e, 0x68, 0x6e, 0x61, 0x70, 0x61, 0x79, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73,
	0x73, 0x2e, 0x48, 0x6e, 0x61, 0x70, 0x61, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e,
	0x48, 0x6e, 0x61, 0x70, 0x61, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x4d, 0x0a, 0x0e, 0x68, 0x6e, 0x61, 0x70, 0x61, 0x79, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x12, 0x1c, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73,
	0x2e, 0x48, 0x6e, 0x61, 0x70, 0x61, 0x79, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52,
	0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x48,
	0x6e, 0x61, 0x70, 0x61, 0x79, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x71, 0x0a, 0x1a, 0x68, 0x6e, 0x61, 0x70, 0x61, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x28, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x48, 0x6e, 0x61, 0x70,
	0x61, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x6e, 0x65, 0x77, 0x5f,
	0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x48, 0x6e, 0x61, 0x70, 0x61, 0x79, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x5f, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x4e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x2e, 0x6e,
	0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x1a, 0x23, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x47, 0x65, 0x74,
	0x4e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x53, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1e, 0x2e, 0x6e, 0x65, 0x77, 0x5f,
	0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x6e, 0x65, 0x77, 0x5f,
	0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x42, 0x1b, 0x5a, 0x19, 0x6e, 0x65,
	0x77, 0x2d, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chess_trade_proto_rawDescOnce sync.Once
	file_chess_trade_proto_rawDescData = file_chess_trade_proto_rawDesc
)

func file_chess_trade_proto_rawDescGZIP() []byte {
	file_chess_trade_proto_rawDescOnce.Do(func() {
		file_chess_trade_proto_rawDescData = protoimpl.X.CompressGZIP(file_chess_trade_proto_rawDescData)
	})
	return file_chess_trade_proto_rawDescData
}

var file_chess_trade_proto_msgTypes = make([]protoimpl.MessageInfo, 62)
var file_chess_trade_proto_goTypes = []any{
	(*PrepaidReq)(nil),                     // 0: new_chess.PrepaidReq
	(*H5PrepaidResp)(nil),                  // 1: new_chess.H5PrepaidResp
	(*JsapiPrepaidResp)(nil),               // 2: new_chess.JsapiPrepaidResp
	(*QueryOrderReq)(nil),                  // 3: new_chess.QueryOrderReq
	(*OrderInfo)(nil),                      // 4: new_chess.OrderInfo
	(*QueryOrderResp)(nil),                 // 5: new_chess.QueryOrderResp
	(*CancelOrderReq)(nil),                 // 6: new_chess.CancelOrderReq
	(*CancelOrderResp)(nil),                // 7: new_chess.CancelOrderResp
	(*RefundOrderReq)(nil),                 // 8: new_chess.RefundOrderReq
	(*RefundOrderResp)(nil),                // 9: new_chess.RefundOrderResp
	(*AppPrepaidResp)(nil),                 // 10: new_chess.AppPrepaidResp
	(*WithdrawBankCardReq)(nil),            // 11: new_chess.WithdrawBankCardReq
	(*WithdrawBankCardResp)(nil),           // 12: new_chess.WithdrawBankCardResp
	(*QueryExtractOrderReq)(nil),           // 13: new_chess.QueryExtractOrderReq
	(*QueryExtractOrderResp)(nil),          // 14: new_chess.QueryExtractOrderResp
	(*SaveExtractConfigReq)(nil),           // 15: new_chess.SaveExtractConfigReq
	(*SaveExtractConfigResp)(nil),          // 16: new_chess.SaveExtractConfigResp
	(*SaveExtractUserConfigReq)(nil),       // 17: new_chess.SaveExtractUserConfigReq
	(*SaveExtractUserConfigResp)(nil),      // 18: new_chess.SaveExtractUserConfigResp
	(*GetExtractConfigReq)(nil),            // 19: new_chess.GetExtractConfigReq
	(*GetExtractConfigResp)(nil),           // 20: new_chess.GetExtractConfigResp
	(*GetExtractUserConfigReq)(nil),        // 21: new_chess.GetExtractUserConfigReq
	(*GetExtractUserConfigResp)(nil),       // 22: new_chess.GetExtractUserConfigResp
	(*GetExtractLogsReq)(nil),              // 23: new_chess.GetExtractLogsReq
	(*ExtractLogInfo)(nil),                 // 24: new_chess.ExtractLogInfo
	(*ExtractLogsData)(nil),                // 25: new_chess.ExtractLogsData
	(*GetExtractLogsResp)(nil),             // 26: new_chess.GetExtractLogsResp
	(*CheckUserExtractRiskReq)(nil),        // 27: new_chess.CheckUserExtractRiskReq
	(*CheckUserExtractRiskData)(nil),       // 28: new_chess.CheckUserExtractRiskData
	(*CheckUserExtractRiskResp)(nil),       // 29: new_chess.CheckUserExtractRiskResp
	(*HnapayNewSelfAccountReq)(nil),        // 30: new_chess.HnapayNewSelfAccountReq
	(*HnapayNewSelfAccountData)(nil),       // 31: new_chess.HnapayNewSelfAccountData
	(*HnapayNewSelfAccountResp)(nil),       // 32: new_chess.HnapayNewSelfAccountResp
	(*HnapayBindBankCardReq)(nil),          // 33: new_chess.HnapayBindBankCardReq
	(*HnapayBindBankCardData)(nil),         // 34: new_chess.HnapayBindBankCardData
	(*HnapayBindBankCardResp)(nil),         // 35: new_chess.HnapayBindBankCardResp
	(*HnapayBindBankCardConfirmReq)(nil),   // 36: new_chess.HnapayBindBankCardConfirmReq
	(*HnapayBindBankCardConfirmData)(nil),  // 37: new_chess.HnapayBindBankCardConfirmData
	(*HnapayBindBankCardConfirmResp)(nil),  // 38: new_chess.HnapayBindBankCardConfirmResp
	(*HnapayUnbindBankCardReq)(nil),        // 39: new_chess.HnapayUnbindBankCardReq
	(*HnapayUnbindBankCardResp)(nil),       // 40: new_chess.HnapayUnbindBankCardResp
	(*HnapayQuickPayOrderReq)(nil),         // 41: new_chess.HnapayQuickPayOrderReq
	(*HnapayQuickPayOrderData)(nil),        // 42: new_chess.HnapayQuickPayOrderData
	(*HnapayQuickPayOrderResp)(nil),        // 43: new_chess.HnapayQuickPayOrderResp
	(*HnapayQuickPayConfirmReq)(nil),       // 44: new_chess.HnapayQuickPayConfirmReq
	(*HnapayQuickPayConfirmResp)(nil),      // 45: new_chess.HnapayQuickPayConfirmResp
	(*HnapayTransferReq)(nil),              // 46: new_chess.HnapayTransferReq
	(*HnapayTransferData)(nil),             // 47: new_chess.HnapayTransferData
	(*HnapayTransferResp)(nil),             // 48: new_chess.HnapayTransferResp
	(*HnapayWithdrawReq)(nil),              // 49: new_chess.HnapayWithdrawReq
	(*HnapayWithdrawData)(nil),             // 50: new_chess.HnapayWithdrawData
	(*HnapayWithdrawResp)(nil),             // 51: new_chess.HnapayWithdrawResp
	(*NcountAccount)(nil),                  // 52: new_chess.NcountAccount
	(*NcountBankCard)(nil),                 // 53: new_chess.NcountBankCard
	(*HnapayCheckUserAccountInfoReq)(nil),  // 54: new_chess.HnapayCheckUserAccountInfoReq
	(*HnapayCheckUserAccountInfoData)(nil), // 55: new_chess.HnapayCheckUserAccountInfoData
	(*HnapayCheckUserAccountInfoResp)(nil), // 56: new_chess.HnapayCheckUserAccountInfoResp
	(*GetNcountAccountInfoReq)(nil),        // 57: new_chess.GetNcountAccountInfoReq
	(*NcountAccountInfoData)(nil),          // 58: new_chess.NcountAccountInfoData
	(*GetNcountAccountInfoResp)(nil),       // 59: new_chess.GetNcountAccountInfoResp
	(*SetPaymentSecretReq)(nil),            // 60: new_chess.SetPaymentSecretReq
	(*SetPaymentSecretResp)(nil),           // 61: new_chess.SetPaymentSecretResp
}
var file_chess_trade_proto_depIdxs = []int32{
	4,  // 0: new_chess.QueryOrderResp.order_info:type_name -> new_chess.OrderInfo
	4,  // 1: new_chess.QueryExtractOrderResp.order_info:type_name -> new_chess.OrderInfo
	15, // 2: new_chess.GetExtractConfigResp.data:type_name -> new_chess.SaveExtractConfigReq
	17, // 3: new_chess.GetExtractUserConfigResp.data:type_name -> new_chess.SaveExtractUserConfigReq
	24, // 4: new_chess.ExtractLogsData.list:type_name -> new_chess.ExtractLogInfo
	25, // 5: new_chess.GetExtractLogsResp.data:type_name -> new_chess.ExtractLogsData
	28, // 6: new_chess.CheckUserExtractRiskResp.data:type_name -> new_chess.CheckUserExtractRiskData
	31, // 7: new_chess.HnapayNewSelfAccountResp.data:type_name -> new_chess.HnapayNewSelfAccountData
	34, // 8: new_chess.HnapayBindBankCardResp.data:type_name -> new_chess.HnapayBindBankCardData
	37, // 9: new_chess.HnapayBindBankCardConfirmResp.data:type_name -> new_chess.HnapayBindBankCardConfirmData
	42, // 10: new_chess.HnapayQuickPayOrderResp.data:type_name -> new_chess.HnapayQuickPayOrderData
	47, // 11: new_chess.HnapayTransferResp.data:type_name -> new_chess.HnapayTransferData
	50, // 12: new_chess.HnapayWithdrawResp.data:type_name -> new_chess.HnapayWithdrawData
	52, // 13: new_chess.HnapayCheckUserAccountInfoReq.ncount_account:type_name -> new_chess.NcountAccount
	53, // 14: new_chess.HnapayCheckUserAccountInfoReq.ncount_bank_card:type_name -> new_chess.NcountBankCard
	55, // 15: new_chess.HnapayCheckUserAccountInfoResp.data:type_name -> new_chess.HnapayCheckUserAccountInfoData
	58, // 16: new_chess.GetNcountAccountInfoResp.data:type_name -> new_chess.NcountAccountInfoData
	0,  // 17: new_chess.Trade.h5Prepaid:input_type -> new_chess.PrepaidReq
	0,  // 18: new_chess.Trade.AppPrepaid:input_type -> new_chess.PrepaidReq
	0,  // 19: new_chess.Trade.jsapiPrepaid:input_type -> new_chess.PrepaidReq
	3,  // 20: new_chess.Trade.queryOrder:input_type -> new_chess.QueryOrderReq
	6,  // 21: new_chess.Trade.cancelOrder:input_type -> new_chess.CancelOrderReq
	8,  // 22: new_chess.Trade.refundOrder:input_type -> new_chess.RefundOrderReq
	11, // 23: new_chess.Trade.withdrawBankCard:input_type -> new_chess.WithdrawBankCardReq
	13, // 24: new_chess.Trade.queryExtractOrder:input_type -> new_chess.QueryExtractOrderReq
	15, // 25: new_chess.Trade.saveExtractConfig:input_type -> new_chess.SaveExtractConfigReq
	19, // 26: new_chess.Trade.getExtractConfig:input_type -> new_chess.GetExtractConfigReq
	17, // 27: new_chess.Trade.saveExtractUserConfig:input_type -> new_chess.SaveExtractUserConfigReq
	21, // 28: new_chess.Trade.getExtractUserConfig:input_type -> new_chess.GetExtractUserConfigReq
	23, // 29: new_chess.Trade.getExtractLogs:input_type -> new_chess.GetExtractLogsReq
	27, // 30: new_chess.Trade.checkUserExtractRisk:input_type -> new_chess.CheckUserExtractRiskReq
	30, // 31: new_chess.Trade.hnapayNewSelfAccount:input_type -> new_chess.HnapayNewSelfAccountReq
	33, // 32: new_chess.Trade.hnapayBindBankCard:input_type -> new_chess.HnapayBindBankCardReq
	36, // 33: new_chess.Trade.hnapayBindBankCardConfirm:input_type -> new_chess.HnapayBindBankCardConfirmReq
	39, // 34: new_chess.Trade.hnapayUnbindBankCard:input_type -> new_chess.HnapayUnbindBankCardReq
	41, // 35: new_chess.Trade.hnapayQuickPayOrder:input_type -> new_chess.HnapayQuickPayOrderReq
	44, // 36: new_chess.Trade.hnapayQuickPayConfirm:input_type -> new_chess.HnapayQuickPayConfirmReq
	46, // 37: new_chess.Trade.hnapayTransfer:input_type -> new_chess.HnapayTransferReq
	49, // 38: new_chess.Trade.hnapayWithdraw:input_type -> new_chess.HnapayWithdrawReq
	54, // 39: new_chess.Trade.hnapayCheckUserAccountInfo:input_type -> new_chess.HnapayCheckUserAccountInfoReq
	57, // 40: new_chess.Trade.getNcountAccountInfo:input_type -> new_chess.GetNcountAccountInfoReq
	60, // 41: new_chess.Trade.setPaymentSecret:input_type -> new_chess.SetPaymentSecretReq
	1,  // 42: new_chess.Trade.h5Prepaid:output_type -> new_chess.H5PrepaidResp
	10, // 43: new_chess.Trade.AppPrepaid:output_type -> new_chess.AppPrepaidResp
	2,  // 44: new_chess.Trade.jsapiPrepaid:output_type -> new_chess.JsapiPrepaidResp
	5,  // 45: new_chess.Trade.queryOrder:output_type -> new_chess.QueryOrderResp
	7,  // 46: new_chess.Trade.cancelOrder:output_type -> new_chess.CancelOrderResp
	9,  // 47: new_chess.Trade.refundOrder:output_type -> new_chess.RefundOrderResp
	12, // 48: new_chess.Trade.withdrawBankCard:output_type -> new_chess.WithdrawBankCardResp
	14, // 49: new_chess.Trade.queryExtractOrder:output_type -> new_chess.QueryExtractOrderResp
	16, // 50: new_chess.Trade.saveExtractConfig:output_type -> new_chess.SaveExtractConfigResp
	20, // 51: new_chess.Trade.getExtractConfig:output_type -> new_chess.GetExtractConfigResp
	18, // 52: new_chess.Trade.saveExtractUserConfig:output_type -> new_chess.SaveExtractUserConfigResp
	22, // 53: new_chess.Trade.getExtractUserConfig:output_type -> new_chess.GetExtractUserConfigResp
	26, // 54: new_chess.Trade.getExtractLogs:output_type -> new_chess.GetExtractLogsResp
	29, // 55: new_chess.Trade.checkUserExtractRisk:output_type -> new_chess.CheckUserExtractRiskResp
	32, // 56: new_chess.Trade.hnapayNewSelfAccount:output_type -> new_chess.HnapayNewSelfAccountResp
	35, // 57: new_chess.Trade.hnapayBindBankCard:output_type -> new_chess.HnapayBindBankCardResp
	38, // 58: new_chess.Trade.hnapayBindBankCardConfirm:output_type -> new_chess.HnapayBindBankCardConfirmResp
	40, // 59: new_chess.Trade.hnapayUnbindBankCard:output_type -> new_chess.HnapayUnbindBankCardResp
	43, // 60: new_chess.Trade.hnapayQuickPayOrder:output_type -> new_chess.HnapayQuickPayOrderResp
	45, // 61: new_chess.Trade.hnapayQuickPayConfirm:output_type -> new_chess.HnapayQuickPayConfirmResp
	48, // 62: new_chess.Trade.hnapayTransfer:output_type -> new_chess.HnapayTransferResp
	51, // 63: new_chess.Trade.hnapayWithdraw:output_type -> new_chess.HnapayWithdrawResp
	56, // 64: new_chess.Trade.hnapayCheckUserAccountInfo:output_type -> new_chess.HnapayCheckUserAccountInfoResp
	59, // 65: new_chess.Trade.getNcountAccountInfo:output_type -> new_chess.GetNcountAccountInfoResp
	61, // 66: new_chess.Trade.setPaymentSecret:output_type -> new_chess.SetPaymentSecretResp
	42, // [42:67] is the sub-list for method output_type
	17, // [17:42] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_chess_trade_proto_init() }
func file_chess_trade_proto_init() {
	if File_chess_trade_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chess_trade_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   62,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chess_trade_proto_goTypes,
		DependencyIndexes: file_chess_trade_proto_depIdxs,
		MessageInfos:      file_chess_trade_proto_msgTypes,
	}.Build()
	File_chess_trade_proto = out.File
	file_chess_trade_proto_rawDesc = nil
	file_chess_trade_proto_goTypes = nil
	file_chess_trade_proto_depIdxs = nil
}
